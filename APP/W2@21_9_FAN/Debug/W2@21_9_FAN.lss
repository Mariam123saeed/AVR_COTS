
W2@21_9_FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003336  000033aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002c94  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010b7  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000710b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000726b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000073fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000943f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b906  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1f 18 	call	0x303e	; 0x303e <main>
      7a:	0c 94 99 19 	jmp	0x3332	; 0x3332 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e6       	ldi	r22, 0x6D	; 109
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 86 19 	jmp	0x330c	; 0x330c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_voidInit>:
#include "ADC_interface.h"
#include "ADC_register.h"


void ADC_voidInit(ADC_refVolt_t copy_tReferenceVoltage)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <ADC_voidInit+0x6>
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_tReferenceVoltage)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3b 83       	std	Y+3, r19	; 0x03
     ca4:	2a 83       	std	Y+2, r18	; 0x02
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	9b 81       	ldd	r25, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	c1 f0       	breq	.+48     	; 0xce0 <ADC_voidInit+0x52>
     cb0:	2a 81       	ldd	r18, Y+2	; 0x02
     cb2:	3b 81       	ldd	r19, Y+3	; 0x03
     cb4:	22 30       	cpi	r18, 0x02	; 2
     cb6:	31 05       	cpc	r19, r1
     cb8:	11 f1       	breq	.+68     	; 0xcfe <ADC_voidInit+0x70>
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	61 f5       	brne	.+88     	; 0xd1a <ADC_voidInit+0x8c>
	{
	  case AVCC         : CLR_BIT(ADMUX_REG,REFS1);SET_BIT(ADMUX_REG,REFS0);break;
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
     cd0:	a7 e2       	ldi	r26, 0x27	; 39
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e2       	ldi	r30, 0x27	; 39
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	8c 93       	st	X, r24
     cde:	1d c0       	rjmp	.+58     	; 0xd1a <ADC_voidInit+0x8c>
	  case AREF         : CLR_BIT(ADMUX_REG,REFS1);CLR_BIT(ADMUX_REG,REFS0);break;
     ce0:	a7 e2       	ldi	r26, 0x27	; 39
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e7 e2       	ldi	r30, 0x27	; 39
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8f 77       	andi	r24, 0x7F	; 127
     cec:	8c 93       	st	X, r24
     cee:	a7 e2       	ldi	r26, 0x27	; 39
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e7 e2       	ldi	r30, 0x27	; 39
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 7b       	andi	r24, 0xBF	; 191
     cfa:	8c 93       	st	X, r24
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <ADC_voidInit+0x8c>
	  case INTERNAL_2_56: SET_BIT(ADMUX_REG,REFS1);SET_BIT(ADMUX_REG,REFS0);break;
     cfe:	a7 e2       	ldi	r26, 0x27	; 39
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e2       	ldi	r30, 0x27	; 39
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	8c 93       	st	X, r24
     d0c:	a7 e2       	ldi	r26, 0x27	; 39
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e2       	ldi	r30, 0x27	; 39
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 64       	ori	r24, 0x40	; 64
     d18:	8c 93       	st	X, r24

	}
	 CLR_BIT(ADMUX_REG,ADLAR);//select Right adjustment
     d1a:	a7 e2       	ldi	r26, 0x27	; 39
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e7 e2       	ldi	r30, 0x27	; 39
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7d       	andi	r24, 0xDF	; 223
     d26:	8c 93       	st	X, r24

	 CLR_BIT(ADCSRA_REG,ADATE); // ADC Auto Trigger disable
     d28:	a6 e2       	ldi	r26, 0x26	; 38
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e6 e2       	ldi	r30, 0x26	; 38
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7d       	andi	r24, 0xDF	; 223
     d34:	8c 93       	st	X, r24

	 CLR_BIT(ADCSRA_REG,ADIE);  //ADC Interrupt disable
     d36:	a6 e2       	ldi	r26, 0x26	; 38
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e6 e2       	ldi	r30, 0x26	; 38
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	87 7f       	andi	r24, 0xF7	; 247
     d42:	8c 93       	st	X, r24

	 // Prescaler 128 For 16MHZ (128 KHZ)
	 	SET_BIT(ADCSRA_REG, ADPS0);
     d44:	a6 e2       	ldi	r26, 0x26	; 38
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	8c 93       	st	X, r24
	 	SET_BIT(ADCSRA_REG, ADPS1);
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 60       	ori	r24, 0x02	; 2
     d5e:	8c 93       	st	X, r24
	 	SET_BIT(ADCSRA_REG, ADPS2);
     d60:	a6 e2       	ldi	r26, 0x26	; 38
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e6 e2       	ldi	r30, 0x26	; 38
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	84 60       	ori	r24, 0x04	; 4
     d6c:	8c 93       	st	X, r24

	 SET_BIT(ADCSRA_REG,ADEN);    //  ADC Enable
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	8c 93       	st	X, r24


}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <ADC_voidGetDigitalValue>:
void ADC_voidGetDigitalValue(ADC_channelIds_t copy_tChannelId, u16* copy_pu16DigitalValue)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <ADC_voidGetDigitalValue+0x6>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	7b 83       	std	Y+3, r23	; 0x03
     d98:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_pu16DigitalValue != NULL)&&(copy_tChannelId <= 31))
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	9b 81       	ldd	r25, Y+3	; 0x03
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	99 f1       	breq	.+102    	; 0xe08 <ADC_voidGetDigitalValue+0x80>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	80 32       	cpi	r24, 0x20	; 32
     da6:	80 f5       	brcc	.+96     	; 0xe08 <ADC_voidGetDigitalValue+0x80>
	{
		//Clear ADMUX Channel Bits
		ADMUX_REG &= 0xE0 ; //0b11100000
     da8:	a7 e2       	ldi	r26, 0x27	; 39
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e7 e2       	ldi	r30, 0x27	; 39
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 7e       	andi	r24, 0xE0	; 224
     db4:	8c 93       	st	X, r24
		// Select Channel Number
		ADMUX_REG |= copy_tChannelId;
     db6:	a7 e2       	ldi	r26, 0x27	; 39
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e7 e2       	ldi	r30, 0x27	; 39
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	90 81       	ld	r25, Z
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	89 2b       	or	r24, r25
     dc4:	8c 93       	st	X, r24

        /*ADC Start Conversion*/
		SET_BIT(ADCSRA_REG ,ADSC);
     dc6:	a6 e2       	ldi	r26, 0x26	; 38
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e6 e2       	ldi	r30, 0x26	; 38
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 64       	ori	r24, 0x40	; 64
     dd2:	8c 93       	st	X, r24

		// Busy Wait for ADC Flag  /* Time Out */
		while (0 == GET_BIT(ADCSRA_REG,ADIF));
     dd4:	e6 e2       	ldi	r30, 0x26	; 38
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 95       	swap	r24
     ddc:	8f 70       	andi	r24, 0x0F	; 15
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	81 70       	andi	r24, 0x01	; 1
     de4:	90 70       	andi	r25, 0x00	; 0
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	a9 f3       	breq	.-22     	; 0xdd4 <ADC_voidGetDigitalValue+0x4c>
		// Clear ADC flag (WROC >> Write One to Clear)
		SET_BIT(ADCSRA_REG,ADIF);
     dea:	a6 e2       	ldi	r26, 0x26	; 38
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e6 e2       	ldi	r30, 0x26	; 38
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 61       	ori	r24, 0x10	; 16
     df6:	8c 93       	st	X, r24
		// Pass out ADC data
		*copy_pu16DigitalValue=ADC_u16_REG;
     df8:	e4 e2       	ldi	r30, 0x24	; 36
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	ea 81       	ldd	r30, Y+2	; 0x02
     e02:	fb 81       	ldd	r31, Y+3	; 0x03
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
	else
	{
		//return error status
	}
	//return local_enumState;
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <DCM_voidInit>:
/* HAL */
#include "DCM_interface.h"
#include "DCM_config.h"

void DCM_voidInit (u8 copy_u8DcMotorSpeed , u8 copy_u8DcMotorNumber)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	28 97       	sbiw	r28, 0x08	; 8
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	6a 83       	std	Y+2, r22	; 0x02
   switch (copy_u8DcMotorSpeed)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	38 87       	std	Y+8, r19	; 0x08
     e34:	2f 83       	std	Y+7, r18	; 0x07
     e36:	8f 81       	ldd	r24, Y+7	; 0x07
     e38:	98 85       	ldd	r25, Y+8	; 0x08
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	31 f0       	breq	.+12     	; 0xe4a <DCM_voidInit+0x36>
     e3e:	2f 81       	ldd	r18, Y+7	; 0x07
     e40:	38 85       	ldd	r19, Y+8	; 0x08
     e42:	21 30       	cpi	r18, 0x01	; 1
     e44:	31 05       	cpc	r19, r1
     e46:	69 f1       	breq	.+90     	; 0xea2 <DCM_voidInit+0x8e>
     e48:	5a c0       	rjmp	.+180    	; 0xefe <DCM_voidInit+0xea>
   {
      case DCM_WITH_CTRL_SREED :
    	  switch (copy_u8DcMotorNumber)
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3e 83       	std	Y+6, r19	; 0x06
     e52:	2d 83       	std	Y+5, r18	; 0x05
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	31 f0       	breq	.+12     	; 0xe68 <DCM_voidInit+0x54>
     e5c:	2d 81       	ldd	r18, Y+5	; 0x05
     e5e:	3e 81       	ldd	r19, Y+6	; 0x06
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	61 f0       	breq	.+24     	; 0xe7e <DCM_voidInit+0x6a>
     e66:	15 c0       	rjmp	.+42     	; 0xe92 <DCM_voidInit+0x7e>
    	  {
    	    case DCM_A :
    	    	DIO_enumSetPinDirection(DCM_INPUT_1_PORT, DCM_INPUT_1_PIN, DIO_PIN_OUTPUT);//in_1
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	63 e0       	ldi	r22, 0x03	; 3
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	    	DIO_enumSetPinDirection(DCM_INPUT_2_PORT, DCM_INPUT_2_PIN, DIO_PIN_OUTPUT);//in_2
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	64 e0       	ldi	r22, 0x04	; 4
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
     e7c:	0a c0       	rjmp	.+20     	; 0xe92 <DCM_voidInit+0x7e>

    	    break;
    	    case DCM_B :
    	    	DIO_enumSetPinDirection(DCM_INPUT_3_PORT, DCM_INPUT_3_PIN, DIO_PIN_OUTPUT);//in_3
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	    	DIO_enumSetPinDirection(DCM_INPUT_4_PORT, DCM_INPUT_4_PIN, DIO_PIN_OUTPUT);//in_4
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	66 e0       	ldi	r22, 0x06	; 6
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>

    	    break;
    	  }
    	  DIO_enumSetPinDirection (DIO_PORTD,DIO_PIN7 , DIO_PIN_OUTPUT); //OC2
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	  PWM2_voidInit ();
     e9c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <PWM2_voidInit>
     ea0:	2e c0       	rjmp	.+92     	; 0xefe <DCM_voidInit+0xea>
      break;
      case DCM_WITHOUT_CTRL_SREED :
    	  switch (copy_u8DcMotorNumber)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3c 83       	std	Y+4, r19	; 0x04
     eaa:	2b 83       	std	Y+3, r18	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	31 f0       	breq	.+12     	; 0xec0 <DCM_voidInit+0xac>
     eb4:	2b 81       	ldd	r18, Y+3	; 0x03
     eb6:	3c 81       	ldd	r19, Y+4	; 0x04
     eb8:	21 30       	cpi	r18, 0x01	; 1
     eba:	31 05       	cpc	r19, r1
     ebc:	89 f0       	breq	.+34     	; 0xee0 <DCM_voidInit+0xcc>
     ebe:	1f c0       	rjmp	.+62     	; 0xefe <DCM_voidInit+0xea>
    	  {
    	    case DCM_A :
    	      	 DIO_enumSetPinDirection(DCM_INPUT_1_PORT, DCM_INPUT_1_PIN, DIO_PIN_OUTPUT);//in_1
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	63 e0       	ldi	r22, 0x03	; 3
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	      	 DIO_enumSetPinDirection(DCM_INPUT_2_PORT, DCM_INPUT_2_PIN, DIO_PIN_OUTPUT);//in_2
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	64 e0       	ldi	r22, 0x04	; 4
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	      	 DIO_enumSetPinDirection(DCM_ENABLE_A_PORT, DCM_ENABLE_A_PIN, DIO_PIN_OUTPUT);//en_A
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	64 e0       	ldi	r22, 0x04	; 4
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
     ede:	0f c0       	rjmp	.+30     	; 0xefe <DCM_voidInit+0xea>
            break;
    	    case DCM_B :
    	      	 DIO_enumSetPinDirection(DCM_INPUT_3_PORT, DCM_INPUT_3_PIN, DIO_PIN_OUTPUT);//in_3
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	65 e0       	ldi	r22, 0x05	; 5
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	      	 DIO_enumSetPinDirection(DCM_INPUT_4_PORT, DCM_INPUT_4_PIN, DIO_PIN_OUTPUT);//in_4
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	66 e0       	ldi	r22, 0x06	; 6
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	      	 DIO_enumSetPinDirection(DCM_ENABLE_B_PORT, DCM_ENABLE_B_PIN, DIO_PIN_OUTPUT);//en_B
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	65 e0       	ldi	r22, 0x05	; 5
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    	  }

      break;
   }

}
     efe:	28 96       	adiw	r28, 0x08	; 8
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <DCM_voidOn>:

void DCM_voidOn   (u8 copy_u8DcMotorState, u8 copy_u8DcMotorNumber )
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	28 97       	sbiw	r28, 0x08	; 8
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02

	    	  switch (copy_u8DcMotorNumber)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	38 87       	std	Y+8, r19	; 0x08
     f30:	2f 83       	std	Y+7, r18	; 0x07
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	31 f0       	breq	.+12     	; 0xf46 <DCM_voidOn+0x36>
     f3a:	2f 81       	ldd	r18, Y+7	; 0x07
     f3c:	38 85       	ldd	r19, Y+8	; 0x08
     f3e:	21 30       	cpi	r18, 0x01	; 1
     f40:	31 05       	cpc	r19, r1
     f42:	81 f1       	breq	.+96     	; 0xfa4 <DCM_voidOn+0x94>
     f44:	5d c0       	rjmp	.+186    	; 0x1000 <DCM_voidOn+0xf0>
	    	  	{
	    	  	  case DCM_A:
	    	  	    switch (copy_u8DcMotorState)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3e 83       	std	Y+6, r19	; 0x06
     f4e:	2d 83       	std	Y+5, r18	; 0x05
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	31 f0       	breq	.+12     	; 0xf64 <DCM_voidOn+0x54>
     f58:	2d 81       	ldd	r18, Y+5	; 0x05
     f5a:	3e 81       	ldd	r19, Y+6	; 0x06
     f5c:	21 30       	cpi	r18, 0x01	; 1
     f5e:	31 05       	cpc	r19, r1
     f60:	89 f0       	breq	.+34     	; 0xf84 <DCM_voidOn+0x74>
     f62:	4e c0       	rjmp	.+156    	; 0x1000 <DCM_voidOn+0xf0>
	    	  		{
	    	  		  case DCMOTOR_CW :
	    	  			  DIO_enumSetPinValue(DCM_ENABLE_A_PORT, DCM_ENABLE_A_PIN, DIO_PIN_HIGH);//en_A
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	64 e0       	ldi	r22, 0x04	; 4
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  			  DIO_enumSetPinValue(DCM_INPUT_1_PORT, DCM_INPUT_1_PIN, DIO_PIN_HIGH);//in_1
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	63 e0       	ldi	r22, 0x03	; 3
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  			  DIO_enumSetPinValue(DCM_INPUT_2_PORT, DCM_INPUT_2_PIN, DIO_PIN_LOW);//in_2
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
     f82:	3e c0       	rjmp	.+124    	; 0x1000 <DCM_voidOn+0xf0>
	    	  		  break;
	    	  		  case DCMOTOR_CCW :
	    	  			  DIO_enumSetPinValue(DCM_ENABLE_A_PORT, DCM_ENABLE_A_PIN, DIO_PIN_HIGH);//en_A
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	64 e0       	ldi	r22, 0x04	; 4
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  			  DIO_enumSetPinValue(DCM_INPUT_1_PORT, DCM_INPUT_1_PIN, DIO_PIN_LOW);//in_1
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	63 e0       	ldi	r22, 0x03	; 3
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  			  DIO_enumSetPinValue(DCM_INPUT_2_PORT, DCM_INPUT_2_PIN, DIO_PIN_HIGH);//in_2
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	64 e0       	ldi	r22, 0x04	; 4
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
     fa2:	2e c0       	rjmp	.+92     	; 0x1000 <DCM_voidOn+0xf0>
	    	  		  break;

	    	  		}
	    	  	 break;
	    	  	 case DCM_B:
	    	  	    switch (copy_u8DcMotorState)
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3c 83       	std	Y+4, r19	; 0x04
     fac:	2b 83       	std	Y+3, r18	; 0x03
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <DCM_voidOn+0xb2>
     fb6:	2b 81       	ldd	r18, Y+3	; 0x03
     fb8:	3c 81       	ldd	r19, Y+4	; 0x04
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	31 05       	cpc	r19, r1
     fbe:	89 f0       	breq	.+34     	; 0xfe2 <DCM_voidOn+0xd2>
     fc0:	1f c0       	rjmp	.+62     	; 0x1000 <DCM_voidOn+0xf0>
	    	  	    {
	    	  	    	case DCMOTOR_CW :
	    	  	    	    DIO_enumSetPinValue(DCM_ENABLE_B_PORT, DCM_ENABLE_B_PIN, DIO_PIN_HIGH);//en_B
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	65 e0       	ldi	r22, 0x05	; 5
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  	    		DIO_enumSetPinValue(DCM_INPUT_3_PORT, DCM_INPUT_3_PIN, DIO_PIN_HIGH);//in_3
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	65 e0       	ldi	r22, 0x05	; 5
     fd0:	41 e0       	ldi	r20, 0x01	; 1
     fd2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  	    		DIO_enumSetPinValue(DCM_INPUT_4_PORT, DCM_INPUT_4_PIN, DIO_PIN_LOW);//in_4
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	66 e0       	ldi	r22, 0x06	; 6
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
     fe0:	0f c0       	rjmp	.+30     	; 0x1000 <DCM_voidOn+0xf0>
	    	            break;
	    	  	    	case DCMOTOR_CCW :
	    	  	    	    DIO_enumSetPinValue(DCM_ENABLE_B_PORT, DCM_ENABLE_B_PIN, DIO_PIN_HIGH);//en_B
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	65 e0       	ldi	r22, 0x05	; 5
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  	    	    DIO_enumSetPinValue(DCM_INPUT_3_PORT, DCM_INPUT_3_PIN, DIO_PIN_LOW);//in_3
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	65 e0       	ldi	r22, 0x05	; 5
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  	    	    DIO_enumSetPinValue(DCM_INPUT_4_PORT, DCM_INPUT_4_PIN, DIO_PIN_HIGH);//in_4
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	66 e0       	ldi	r22, 0x06	; 6
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    	  	break;
	    	 }



}
    1000:	28 96       	adiw	r28, 0x08	; 8
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DCM_voidOnWithControlSpeed>:
void DCM_voidOnWithControlSpeed (u8 copy_u8DcMotorState, u8 copy_u8DcMotorNumber,u8 copy_u8DcMotorSpeed)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	29 97       	sbiw	r28, 0x09	; 9
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	6a 83       	std	Y+2, r22	; 0x02
    102a:	4b 83       	std	Y+3, r20	; 0x03
	switch (copy_u8DcMotorNumber)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	39 87       	std	Y+9, r19	; 0x09
    1034:	28 87       	std	Y+8, r18	; 0x08
    1036:	88 85       	ldd	r24, Y+8	; 0x08
    1038:	99 85       	ldd	r25, Y+9	; 0x09
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	31 f0       	breq	.+12     	; 0x104a <DCM_voidOnWithControlSpeed+0x38>
    103e:	28 85       	ldd	r18, Y+8	; 0x08
    1040:	39 85       	ldd	r19, Y+9	; 0x09
    1042:	21 30       	cpi	r18, 0x01	; 1
    1044:	31 05       	cpc	r19, r1
    1046:	31 f1       	breq	.+76     	; 0x1094 <DCM_voidOnWithControlSpeed+0x82>
    1048:	49 c0       	rjmp	.+146    	; 0x10dc <DCM_voidOnWithControlSpeed+0xca>
	{
		 case DCM_A:
		      switch (copy_u8DcMotorState)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	3f 83       	std	Y+7, r19	; 0x07
    1052:	2e 83       	std	Y+6, r18	; 0x06
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	31 f0       	breq	.+12     	; 0x1068 <DCM_voidOnWithControlSpeed+0x56>
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	21 30       	cpi	r18, 0x01	; 1
    1062:	31 05       	cpc	r19, r1
    1064:	61 f0       	breq	.+24     	; 0x107e <DCM_voidOnWithControlSpeed+0x6c>
    1066:	3a c0       	rjmp	.+116    	; 0x10dc <DCM_voidOnWithControlSpeed+0xca>
		        {
		    	   case DCMOTOR_CW :
	                    DIO_enumSetPinValue(DCM_INPUT_1_PORT, DCM_INPUT_1_PIN, DIO_PIN_HIGH);//in_1
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	63 e0       	ldi	r22, 0x03	; 3
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
		    	  	    DIO_enumSetPinValue(DCM_INPUT_2_PORT, DCM_INPUT_2_PIN, DIO_PIN_LOW);//in_2
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	64 e0       	ldi	r22, 0x04	; 4
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    107c:	2f c0       	rjmp	.+94     	; 0x10dc <DCM_voidOnWithControlSpeed+0xca>
		    	   break;
		    	   case DCMOTOR_CCW :
		    	  	    DIO_enumSetPinValue(DCM_INPUT_1_PORT, DCM_INPUT_1_PIN, DIO_PIN_LOW);//in_1
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	63 e0       	ldi	r22, 0x03	; 3
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
		    	  	    DIO_enumSetPinValue(DCM_INPUT_2_PORT, DCM_INPUT_2_PIN, DIO_PIN_HIGH);//in_2
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	64 e0       	ldi	r22, 0x04	; 4
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    1092:	24 c0       	rjmp	.+72     	; 0x10dc <DCM_voidOnWithControlSpeed+0xca>
		    	   break;

		    	 }
		  break;
		  case DCM_B:
		       switch (copy_u8DcMotorState)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	2c 83       	std	Y+4, r18	; 0x04
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <DCM_voidOnWithControlSpeed+0xa0>
    10a6:	2c 81       	ldd	r18, Y+4	; 0x04
    10a8:	3d 81       	ldd	r19, Y+5	; 0x05
    10aa:	21 30       	cpi	r18, 0x01	; 1
    10ac:	31 05       	cpc	r19, r1
    10ae:	61 f0       	breq	.+24     	; 0x10c8 <DCM_voidOnWithControlSpeed+0xb6>
    10b0:	15 c0       	rjmp	.+42     	; 0x10dc <DCM_voidOnWithControlSpeed+0xca>
		    	{
		    	  	case DCMOTOR_CW :
		    	  	     DIO_enumSetPinValue(DCM_INPUT_3_PORT, DCM_INPUT_3_PIN, DIO_PIN_HIGH);//in_3
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	65 e0       	ldi	r22, 0x05	; 5
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
		    	  	     DIO_enumSetPinValue(DCM_INPUT_4_PORT, DCM_INPUT_4_PIN, DIO_PIN_LOW);//in_4
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	66 e0       	ldi	r22, 0x06	; 6
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    10c6:	0a c0       	rjmp	.+20     	; 0x10dc <DCM_voidOnWithControlSpeed+0xca>
		    	    break;
		    	  	case DCMOTOR_CCW :
		    	  	     DIO_enumSetPinValue(DCM_INPUT_3_PORT, DCM_INPUT_3_PIN, DIO_PIN_LOW);//in_3
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	65 e0       	ldi	r22, 0x05	; 5
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
		    	  	     DIO_enumSetPinValue(DCM_INPUT_4_PORT, DCM_INPUT_4_PIN, DIO_PIN_HIGH);//in_4
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	66 e0       	ldi	r22, 0x06	; 6
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
		    	  	break;

		    	 }
		  break;
     }
	PWM2_voidGeneratePWM (copy_u8DcMotorSpeed);
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <PWM2_voidGeneratePWM>
}
    10e2:	29 96       	adiw	r28, 0x09	; 9
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DCM_voidOff>:
void DCM_voidOff   (u8 copy_u8DcMotorSpeed  , u8 copy_u8DcMotorNumber)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	28 97       	sbiw	r28, 0x08	; 8
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8DcMotorSpeed)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	38 87       	std	Y+8, r19	; 0x08
    1114:	2f 83       	std	Y+7, r18	; 0x07
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	31 f0       	breq	.+12     	; 0x112a <DCM_voidOff+0x36>
    111e:	2f 81       	ldd	r18, Y+7	; 0x07
    1120:	38 85       	ldd	r19, Y+8	; 0x08
    1122:	21 30       	cpi	r18, 0x01	; 1
    1124:	31 05       	cpc	r19, r1
    1126:	b1 f0       	breq	.+44     	; 0x1154 <DCM_voidOff+0x60>
    1128:	2f c0       	rjmp	.+94     	; 0x1188 <DCM_voidOff+0x94>
     {
		case DCM_WITH_CTRL_SREED :
			switch (copy_u8DcMotorNumber)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3e 83       	std	Y+6, r19	; 0x06
    1132:	2d 83       	std	Y+5, r18	; 0x05
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	31 f0       	breq	.+12     	; 0x1148 <DCM_voidOff+0x54>
    113c:	2d 81       	ldd	r18, Y+5	; 0x05
    113e:	3e 81       	ldd	r19, Y+6	; 0x06
    1140:	21 30       	cpi	r18, 0x01	; 1
    1142:	31 05       	cpc	r19, r1
    1144:	21 f0       	breq	.+8      	; 0x114e <DCM_voidOff+0x5a>
    1146:	20 c0       	rjmp	.+64     	; 0x1188 <DCM_voidOff+0x94>
		     {
				 case DCM_A:
					 PWM2_voidStop();
    1148:	0e 94 03 18 	call	0x3006	; 0x3006 <PWM2_voidStop>
    114c:	1d c0       	rjmp	.+58     	; 0x1188 <DCM_voidOff+0x94>
			     break;
				 case DCM_B:
					 PWM2_voidStop();
    114e:	0e 94 03 18 	call	0x3006	; 0x3006 <PWM2_voidStop>
    1152:	1a c0       	rjmp	.+52     	; 0x1188 <DCM_voidOff+0x94>
				 break;
		     }
		break;
		case DCM_WITHOUT_CTRL_SREED :
			switch (copy_u8DcMotorNumber)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	31 f0       	breq	.+12     	; 0x1172 <DCM_voidOff+0x7e>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	21 30       	cpi	r18, 0x01	; 1
    116c:	31 05       	cpc	r19, r1
    116e:	39 f0       	breq	.+14     	; 0x117e <DCM_voidOff+0x8a>
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <DCM_voidOff+0x94>
			{
			     case DCM_A:
			    	 DIO_enumSetPinValue(DCM_ENABLE_A_PORT, DCM_ENABLE_A_PIN, DIO_PIN_LOW);//en_A
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	64 e0       	ldi	r22, 0x04	; 4
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <DCM_voidOff+0x94>
			     break;
			     case DCM_B:
			    	 DIO_enumSetPinValue(DCM_ENABLE_B_PORT, DCM_ENABLE_B_PIN, DIO_PIN_LOW);//en_B
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	65 e0       	ldi	r22, 0x05	; 5
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
				break;
			}
	    break;
     }
}
    1188:	28 96       	adiw	r28, 0x08	; 8
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <DIO_enumSetPinDirection>:
  	  =>Copy_u8PinDirection --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]

 */

DIO_Errorstatus DIO_enumSetPinDirection  (u8 copy_u8PortId , u8 copy_u8PinId , u8 copy_u8PinDirection)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	28 97       	sbiw	r28, 0x08	; 8
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	6b 83       	std	Y+3, r22	; 0x03
    11b2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_enumSetPinDirection+0x26>
    11be:	f2 c0       	rjmp	.+484    	; 0x13a4 <DIO_enumSetPinDirection+0x20a>
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 30       	cpi	r24, 0x08	; 8
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <DIO_enumSetPinDirection+0x2e>
    11c6:	ee c0       	rjmp	.+476    	; 0x13a4 <DIO_enumSetPinDirection+0x20a>
	{
		if(copy_u8PinDirection==DIO_PIN_OUTPUT)
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <DIO_enumSetPinDirection+0x36>
    11ce:	6f c0       	rjmp	.+222    	; 0x12ae <DIO_enumSetPinDirection+0x114>
		{
			 switch(copy_u8PortId)
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	38 87       	std	Y+8, r19	; 0x08
    11d8:	2f 83       	std	Y+7, r18	; 0x07
    11da:	8f 81       	ldd	r24, Y+7	; 0x07
    11dc:	98 85       	ldd	r25, Y+8	; 0x08
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	49 f1       	breq	.+82     	; 0x1236 <DIO_enumSetPinDirection+0x9c>
    11e4:	2f 81       	ldd	r18, Y+7	; 0x07
    11e6:	38 85       	ldd	r19, Y+8	; 0x08
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <DIO_enumSetPinDirection+0x5e>
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <DIO_enumSetPinDirection+0x74>
    11f6:	d8 c0       	rjmp	.+432    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
    11f8:	2f 81       	ldd	r18, Y+7	; 0x07
    11fa:	38 85       	ldd	r19, Y+8	; 0x08
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	71 f1       	breq	.+92     	; 0x125e <DIO_enumSetPinDirection+0xc4>
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	e9 f1       	breq	.+122    	; 0x1286 <DIO_enumSetPinDirection+0xec>
    120c:	cd c0       	rjmp	.+410    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
			 {
			     case DIO_PORTA: SET_BIT(DDRA_REG,copy_u8PinId) ;  break;
    120e:	aa e3       	ldi	r26, 0x3A	; 58
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ea e3       	ldi	r30, 0x3A	; 58
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_enumSetPinDirection+0x92>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_enumSetPinDirection+0x8e>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	b9 c0       	rjmp	.+370    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
			     case DIO_PORTB: SET_BIT(DDRB_REG,copy_u8PinId) ;  break;
    1236:	a7 e3       	ldi	r26, 0x37	; 55
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e7 e3       	ldi	r30, 0x37	; 55
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_enumSetPinDirection+0xba>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_enumSetPinDirection+0xb6>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	a5 c0       	rjmp	.+330    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
			     case DIO_PORTC: SET_BIT(DDRC_REG,copy_u8PinId) ;  break;
    125e:	a4 e3       	ldi	r26, 0x34	; 52
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enumSetPinDirection+0xe2>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enumSetPinDirection+0xde>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	91 c0       	rjmp	.+290    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
			     case DIO_PORTD: SET_BIT(DDRD_REG,copy_u8PinId) ;  break;
    1286:	a1 e3       	ldi	r26, 0x31	; 49
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_enumSetPinDirection+0x10a>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_enumSetPinDirection+0x106>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	7d c0       	rjmp	.+250    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>

			 }
		}
		else if(copy_u8PinDirection==DIO_PIN_INPUT)
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	88 23       	and	r24, r24
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <DIO_enumSetPinDirection+0x11c>
    12b4:	74 c0       	rjmp	.+232    	; 0x139e <DIO_enumSetPinDirection+0x204>
		{
			switch(copy_u8PortId)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3e 83       	std	Y+6, r19	; 0x06
    12be:	2d 83       	std	Y+5, r18	; 0x05
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	59 f1       	breq	.+86     	; 0x1320 <DIO_enumSetPinDirection+0x186>
    12ca:	2d 81       	ldd	r18, Y+5	; 0x05
    12cc:	3e 81       	ldd	r19, Y+6	; 0x06
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <DIO_enumSetPinDirection+0x144>
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f0       	breq	.+26     	; 0x12f6 <DIO_enumSetPinDirection+0x15c>
    12dc:	65 c0       	rjmp	.+202    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
    12de:	2d 81       	ldd	r18, Y+5	; 0x05
    12e0:	3e 81       	ldd	r19, Y+6	; 0x06
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	89 f1       	breq	.+98     	; 0x134a <DIO_enumSetPinDirection+0x1b0>
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <DIO_enumSetPinDirection+0x15a>
    12f2:	40 c0       	rjmp	.+128    	; 0x1374 <DIO_enumSetPinDirection+0x1da>
    12f4:	59 c0       	rjmp	.+178    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
			  {
				   case DIO_PORTA: CLR_BIT(DDRA_REG,copy_u8PinId) ;  break;
    12f6:	aa e3       	ldi	r26, 0x3A	; 58
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_enumSetPinDirection+0x17a>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_enumSetPinDirection+0x176>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	44 c0       	rjmp	.+136    	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
				   case DIO_PORTB: CLR_BIT(DDRB_REG,copy_u8PinId) ;  break;
    1320:	a7 e3       	ldi	r26, 0x37	; 55
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e7 e3       	ldi	r30, 0x37	; 55
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_enumSetPinDirection+0x1a4>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_enumSetPinDirection+0x1a0>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	2f c0       	rjmp	.+94     	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
	 		       case DIO_PORTC: CLR_BIT(DDRC_REG,copy_u8PinId) ;  break;
    134a:	a4 e3       	ldi	r26, 0x34	; 52
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e4 e3       	ldi	r30, 0x34	; 52
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_enumSetPinDirection+0x1ce>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_enumSetPinDirection+0x1ca>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	1a c0       	rjmp	.+52     	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
			       case DIO_PORTD: CLR_BIT(DDRD_REG,copy_u8PinId) ;  break;
    1374:	a1 e3       	ldi	r26, 0x31	; 49
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_enumSetPinDirection+0x1f8>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_enumSetPinDirection+0x1f4>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <DIO_enumSetPinDirection+0x20e>

			 }
		}
		else
		{
				LOC_enumstate=DIO_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_enumSetPinDirection+0x20e>
		}
	}
	else
	{
		LOC_enumstate=DIO_OK;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_enumstate;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	28 96       	adiw	r28, 0x08	; 8
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_enumSetPinValue>:
  	  =>Copy_u8PortId --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PinId  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8PinValue --> Pin Value [ DIO_HIGH , DIO_LOW ]
 */
DIO_Errorstatus DIO_enumSetPinValue      (u8 copy_u8PortId , u8 copy_u8PinId , u8 copy_u8PinValue)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	2e 97       	sbiw	r28, 0x0e	; 14
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	6b 83       	std	Y+3, r22	; 0x03
    13d4:	4c 83       	std	Y+4, r20	; 0x04
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
   if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&((copy_u8PinValue==DIO_PIN_HIGH)||(copy_u8PinValue==DIO_PIN_LOW)))
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <DIO_enumSetPinValue+0x26>
    13e0:	0e c1       	rjmp	.+540    	; 0x15fe <DIO_enumSetPinValue+0x242>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <DIO_enumSetPinValue+0x2e>
    13e8:	0a c1       	rjmp	.+532    	; 0x15fe <DIO_enumSetPinValue+0x242>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	21 f0       	breq	.+8      	; 0x13f8 <DIO_enumSetPinValue+0x3c>
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	88 23       	and	r24, r24
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <DIO_enumSetPinValue+0x3c>
    13f6:	03 c1       	rjmp	.+518    	; 0x15fe <DIO_enumSetPinValue+0x242>
   {
	   switch (copy_u8PortId)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3e 87       	std	Y+14, r19	; 0x0e
    1400:	2d 87       	std	Y+13, r18	; 0x0d
    1402:	8d 85       	ldd	r24, Y+13	; 0x0d
    1404:	9e 85       	ldd	r25, Y+14	; 0x0e
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_enumSetPinValue+0x52>
    140c:	4f c0       	rjmp	.+158    	; 0x14ac <DIO_enumSetPinValue+0xf0>
    140e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1410:	3e 85       	ldd	r19, Y+14	; 0x0e
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <DIO_enumSetPinValue+0x66>
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	71 f0       	breq	.+28     	; 0x143c <DIO_enumSetPinValue+0x80>
    1420:	ec c0       	rjmp	.+472    	; 0x15fa <DIO_enumSetPinValue+0x23e>
    1422:	2d 85       	ldd	r18, Y+13	; 0x0d
    1424:	3e 85       	ldd	r19, Y+14	; 0x0e
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <DIO_enumSetPinValue+0x72>
    142c:	77 c0       	rjmp	.+238    	; 0x151c <DIO_enumSetPinValue+0x160>
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_enumSetPinValue+0x7e>
    1438:	a9 c0       	rjmp	.+338    	; 0x158c <DIO_enumSetPinValue+0x1d0>
    143a:	df c0       	rjmp	.+446    	; 0x15fa <DIO_enumSetPinValue+0x23e>
	   {
	    case DIO_PORTA :
	    	switch(copy_u8PinValue)
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3c 87       	std	Y+12, r19	; 0x0c
    1444:	2b 87       	std	Y+11, r18	; 0x0b
    1446:	8b 85       	ldd	r24, Y+11	; 0x0b
    1448:	9c 85       	ldd	r25, Y+12	; 0x0c
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	d1 f0       	breq	.+52     	; 0x1482 <DIO_enumSetPinValue+0xc6>
    144e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1450:	3c 85       	ldd	r19, Y+12	; 0x0c
    1452:	21 30       	cpi	r18, 0x01	; 1
    1454:	31 05       	cpc	r19, r1
    1456:	09 f0       	breq	.+2      	; 0x145a <DIO_enumSetPinValue+0x9e>
    1458:	d3 c0       	rjmp	.+422    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	{
	    	  case DIO_PIN_HIGH :SET_BIT(PORTA_REG,copy_u8PinId);break;
    145a:	ab e3       	ldi	r26, 0x3B	; 59
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_enumSetPinValue+0xbc>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_enumSetPinValue+0xb8>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	bf c0       	rjmp	.+382    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	  case DIO_PIN_LOW  :CLR_BIT(PORTA_REG,copy_u8PinId);break;
    1482:	ab e3       	ldi	r26, 0x3B	; 59
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	eb e3       	ldi	r30, 0x3B	; 59
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_enumSetPinValue+0xe4>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_enumSetPinValue+0xe0>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	aa c0       	rjmp	.+340    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	}
	    	break;
	    case DIO_PORTB :
	    	switch(copy_u8PinValue)
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3a 87       	std	Y+10, r19	; 0x0a
    14b4:	29 87       	std	Y+9, r18	; 0x09
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <DIO_enumSetPinValue+0x136>
    14be:	29 85       	ldd	r18, Y+9	; 0x09
    14c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c2:	21 30       	cpi	r18, 0x01	; 1
    14c4:	31 05       	cpc	r19, r1
    14c6:	09 f0       	breq	.+2      	; 0x14ca <DIO_enumSetPinValue+0x10e>
    14c8:	9b c0       	rjmp	.+310    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	{
	    	   case DIO_PIN_HIGH :SET_BIT(PORTB_REG,copy_u8PinId);break;
    14ca:	a8 e3       	ldi	r26, 0x38	; 56
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e8 e3       	ldi	r30, 0x38	; 56
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_enumSetPinValue+0x12c>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_enumSetPinValue+0x128>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	87 c0       	rjmp	.+270    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	   case DIO_PIN_LOW  :CLR_BIT(PORTB_REG,copy_u8PinId);break;
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_enumSetPinValue+0x154>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_enumSetPinValue+0x150>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	72 c0       	rjmp	.+228    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	}
	    	break;
	    case DIO_PORTC :
	    	switch(copy_u8PinValue)
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	38 87       	std	Y+8, r19	; 0x08
    1524:	2f 83       	std	Y+7, r18	; 0x07
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	d1 f0       	breq	.+52     	; 0x1562 <DIO_enumSetPinValue+0x1a6>
    152e:	2f 81       	ldd	r18, Y+7	; 0x07
    1530:	38 85       	ldd	r19, Y+8	; 0x08
    1532:	21 30       	cpi	r18, 0x01	; 1
    1534:	31 05       	cpc	r19, r1
    1536:	09 f0       	breq	.+2      	; 0x153a <DIO_enumSetPinValue+0x17e>
    1538:	63 c0       	rjmp	.+198    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	{
	    	   case DIO_PIN_HIGH :SET_BIT(PORTC_REG,copy_u8PinId);break;
    153a:	a5 e3       	ldi	r26, 0x35	; 53
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_enumSetPinValue+0x19c>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_enumSetPinValue+0x198>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	4f c0       	rjmp	.+158    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	   case DIO_PIN_LOW  :CLR_BIT(PORTC_REG,copy_u8PinId);break;
    1562:	a5 e3       	ldi	r26, 0x35	; 53
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e3       	ldi	r30, 0x35	; 53
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_enumSetPinValue+0x1c4>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_enumSetPinValue+0x1c0>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	3a c0       	rjmp	.+116    	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	}
	    	break;
	    case DIO_PORTD :
	    	switch(copy_u8PinValue)
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3e 83       	std	Y+6, r19	; 0x06
    1594:	2d 83       	std	Y+5, r18	; 0x05
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	c9 f0       	breq	.+50     	; 0x15d0 <DIO_enumSetPinValue+0x214>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	21 30       	cpi	r18, 0x01	; 1
    15a4:	31 05       	cpc	r19, r1
    15a6:	61 f5       	brne	.+88     	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	{
	    	   case DIO_PIN_HIGH :SET_BIT(PORTD_REG,copy_u8PinId);break;
    15a8:	a2 e3       	ldi	r26, 0x32	; 50
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e2 e3       	ldi	r30, 0x32	; 50
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_enumSetPinValue+0x20a>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_enumSetPinValue+0x206>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	18 c0       	rjmp	.+48     	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	   case DIO_PIN_LOW  :CLR_BIT(PORTD_REG,copy_u8PinId);break;
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_enumSetPinValue+0x232>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_enumSetPinValue+0x22e>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <DIO_enumSetPinValue+0x244>
	    	}
	       break;
	   default :  LOC_enumstate=DIO_NOK;
    15fa:	19 82       	std	Y+1, r1	; 0x01
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <DIO_enumSetPinValue+0x244>
	       break;
	  }
    }
    else
    {
	     LOC_enumstate=DIO_NOK;
    15fe:	19 82       	std	Y+1, r1	; 0x01
    }
   return LOC_enumstate;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
}
    1602:	2e 96       	adiw	r28, 0x0e	; 14
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <DIO_enumGetPinValue>:
  	  =>Copy_u8PortId --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PinId  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>*copy_u8PinValue --> pointer to recieve the pin value
 */
DIO_Errorstatus DIO_enumGetPinValue      (u8 copy_u8PortId , u8 copy_u8PinId , u8 *copy_u8PinValue)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	27 97       	sbiw	r28, 0x07	; 7
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	8a 83       	std	Y+2, r24	; 0x02
    162a:	6b 83       	std	Y+3, r22	; 0x03
    162c:	5d 83       	std	Y+5, r21	; 0x05
    162e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	08 f0       	brcs	.+2      	; 0x163c <DIO_enumGetPinValue+0x28>
    163a:	77 c0       	rjmp	.+238    	; 0x172a <DIO_enumGetPinValue+0x116>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	08 f0       	brcs	.+2      	; 0x1644 <DIO_enumGetPinValue+0x30>
    1642:	73 c0       	rjmp	.+230    	; 0x172a <DIO_enumGetPinValue+0x116>
	{
		switch (copy_u8PortId)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3f 83       	std	Y+7, r19	; 0x07
    164c:	2e 83       	std	Y+6, r18	; 0x06
    164e:	4e 81       	ldd	r20, Y+6	; 0x06
    1650:	5f 81       	ldd	r21, Y+7	; 0x07
    1652:	41 30       	cpi	r20, 0x01	; 1
    1654:	51 05       	cpc	r21, r1
    1656:	59 f1       	breq	.+86     	; 0x16ae <DIO_enumGetPinValue+0x9a>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	91 05       	cpc	r25, r1
    1660:	34 f4       	brge	.+12     	; 0x166e <DIO_enumGetPinValue+0x5a>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	21 15       	cp	r18, r1
    1668:	31 05       	cpc	r19, r1
    166a:	69 f0       	breq	.+26     	; 0x1686 <DIO_enumGetPinValue+0x72>
    166c:	5c c0       	rjmp	.+184    	; 0x1726 <DIO_enumGetPinValue+0x112>
    166e:	4e 81       	ldd	r20, Y+6	; 0x06
    1670:	5f 81       	ldd	r21, Y+7	; 0x07
    1672:	42 30       	cpi	r20, 0x02	; 2
    1674:	51 05       	cpc	r21, r1
    1676:	79 f1       	breq	.+94     	; 0x16d6 <DIO_enumGetPinValue+0xc2>
    1678:	8e 81       	ldd	r24, Y+6	; 0x06
    167a:	9f 81       	ldd	r25, Y+7	; 0x07
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <DIO_enumGetPinValue+0x70>
    1682:	3d c0       	rjmp	.+122    	; 0x16fe <DIO_enumGetPinValue+0xea>
    1684:	50 c0       	rjmp	.+160    	; 0x1726 <DIO_enumGetPinValue+0x112>
		{
	  	    case DIO_PORTA : *copy_u8PinValue = GET_BIT (PINA_REG,copy_u8PinId);break;
    1686:	e9 e3       	ldi	r30, 0x39	; 57
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_enumGetPinValue+0x8a>
    169a:	55 95       	asr	r21
    169c:	47 95       	ror	r20
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_enumGetPinValue+0x86>
    16a2:	ca 01       	movw	r24, r20
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	ec 81       	ldd	r30, Y+4	; 0x04
    16a8:	fd 81       	ldd	r31, Y+5	; 0x05
    16aa:	80 83       	st	Z, r24
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <DIO_enumGetPinValue+0x118>
	  	    case DIO_PORTB : *copy_u8PinValue = GET_BIT (PINB_REG,copy_u8PinId);break;
    16ae:	e6 e3       	ldi	r30, 0x36	; 54
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a9 01       	movw	r20, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <DIO_enumGetPinValue+0xb2>
    16c2:	55 95       	asr	r21
    16c4:	47 95       	ror	r20
    16c6:	8a 95       	dec	r24
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <DIO_enumGetPinValue+0xae>
    16ca:	ca 01       	movw	r24, r20
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	ec 81       	ldd	r30, Y+4	; 0x04
    16d0:	fd 81       	ldd	r31, Y+5	; 0x05
    16d2:	80 83       	st	Z, r24
    16d4:	2b c0       	rjmp	.+86     	; 0x172c <DIO_enumGetPinValue+0x118>
			case DIO_PORTC : *copy_u8PinValue = GET_BIT (PINC_REG,copy_u8PinId);break;
    16d6:	e3 e3       	ldi	r30, 0x33	; 51
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_enumGetPinValue+0xda>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_enumGetPinValue+0xd6>
    16f2:	ca 01       	movw	r24, r20
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	ec 81       	ldd	r30, Y+4	; 0x04
    16f8:	fd 81       	ldd	r31, Y+5	; 0x05
    16fa:	80 83       	st	Z, r24
    16fc:	17 c0       	rjmp	.+46     	; 0x172c <DIO_enumGetPinValue+0x118>
	  	    case DIO_PORTD : *copy_u8PinValue = GET_BIT (PIND_REG,copy_u8PinId);break;
    16fe:	e0 e3       	ldi	r30, 0x30	; 48
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a9 01       	movw	r20, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_enumGetPinValue+0x102>
    1712:	55 95       	asr	r21
    1714:	47 95       	ror	r20
    1716:	8a 95       	dec	r24
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_enumGetPinValue+0xfe>
    171a:	ca 01       	movw	r24, r20
    171c:	81 70       	andi	r24, 0x01	; 1
    171e:	ec 81       	ldd	r30, Y+4	; 0x04
    1720:	fd 81       	ldd	r31, Y+5	; 0x05
    1722:	80 83       	st	Z, r24
    1724:	03 c0       	rjmp	.+6      	; 0x172c <DIO_enumGetPinValue+0x118>
	  	    default        : LOC_enumstate=DIO_NOK;                             break;
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	01 c0       	rjmp	.+2      	; 0x172c <DIO_enumGetPinValue+0x118>
		}
	}
	else
	{
		LOC_enumstate=DIO_NOK;
    172a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumstate;
    172c:	89 81       	ldd	r24, Y+1	; 0x01

}
    172e:	27 96       	adiw	r28, 0x07	; 7
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <DIO_enumTogglePinValue>:
  	  =>Copy_u8PortId --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PinId  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]

 */
DIO_Errorstatus DIO_enumTogglePinValue   (u8 copy_u8PortId , u8 copy_u8PinId )
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <DIO_enumTogglePinValue+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_enumTogglePinValue+0x8>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	8a 83       	std	Y+2, r24	; 0x02
    1750:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PinId<=DIO_PIN7)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	88 30       	cpi	r24, 0x08	; 8
    175a:	08 f0       	brcs	.+2      	; 0x175e <DIO_enumTogglePinValue+0x1e>
    175c:	71 c0       	rjmp	.+226    	; 0x1840 <DIO_enumTogglePinValue+0x100>
	{
		switch(copy_u8PortId)
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3d 83       	std	Y+5, r19	; 0x05
    1766:	2c 83       	std	Y+4, r18	; 0x04
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	9d 81       	ldd	r25, Y+5	; 0x05
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	49 f1       	breq	.+82     	; 0x17c4 <DIO_enumTogglePinValue+0x84>
    1772:	2c 81       	ldd	r18, Y+4	; 0x04
    1774:	3d 81       	ldd	r19, Y+5	; 0x05
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	2c f4       	brge	.+10     	; 0x1786 <DIO_enumTogglePinValue+0x46>
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	61 f0       	breq	.+24     	; 0x179c <DIO_enumTogglePinValue+0x5c>
    1784:	5b c0       	rjmp	.+182    	; 0x183c <DIO_enumTogglePinValue+0xfc>
    1786:	2c 81       	ldd	r18, Y+4	; 0x04
    1788:	3d 81       	ldd	r19, Y+5	; 0x05
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	71 f1       	breq	.+92     	; 0x17ec <DIO_enumTogglePinValue+0xac>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	91 05       	cpc	r25, r1
    1798:	e9 f1       	breq	.+122    	; 0x1814 <DIO_enumTogglePinValue+0xd4>
    179a:	50 c0       	rjmp	.+160    	; 0x183c <DIO_enumTogglePinValue+0xfc>
		{
		     case DIO_PORTA : TOG_BIT (PORTA_REG,copy_u8PinId);break;
    179c:	ab e3       	ldi	r26, 0x3B	; 59
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	eb e3       	ldi	r30, 0x3B	; 59
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_enumTogglePinValue+0x7a>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_enumTogglePinValue+0x76>
    17be:	84 27       	eor	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <DIO_enumTogglePinValue+0x102>
			 case DIO_PORTB : TOG_BIT (PORTB_REG,copy_u8PinId);break;
    17c4:	a8 e3       	ldi	r26, 0x38	; 56
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 e3       	ldi	r30, 0x38	; 56
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_enumTogglePinValue+0xa2>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_enumTogglePinValue+0x9e>
    17e6:	84 27       	eor	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	2b c0       	rjmp	.+86     	; 0x1842 <DIO_enumTogglePinValue+0x102>
			 case DIO_PORTC : TOG_BIT (PORTC_REG,copy_u8PinId);break;
    17ec:	a5 e3       	ldi	r26, 0x35	; 53
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_enumTogglePinValue+0xca>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_enumTogglePinValue+0xc6>
    180e:	84 27       	eor	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	17 c0       	rjmp	.+46     	; 0x1842 <DIO_enumTogglePinValue+0x102>
			 case DIO_PORTD : TOG_BIT (PORTD_REG,copy_u8PinId);break;
    1814:	a2 e3       	ldi	r26, 0x32	; 50
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e2 e3       	ldi	r30, 0x32	; 50
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_enumTogglePinValue+0xf2>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_enumTogglePinValue+0xee>
    1836:	84 27       	eor	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <DIO_enumTogglePinValue+0x102>
			 default        : LOC_enumstate=DIO_NOK;           break;
    183c:	19 82       	std	Y+1, r1	; 0x01
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <DIO_enumTogglePinValue+0x102>
		}
	}
	else
	{
		LOC_enumstate=DIO_NOK;
    1840:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumstate;
    1842:	89 81       	ldd	r24, Y+1	; 0x01
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <DIO_enumSetPortDirection>:
  	  =>Copy_u8PortID --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PortDirection --> Port Direction [ DIO_Port_OUTPUT , DIO_Port_INPUT ]

 */
DIO_Errorstatus DIO_enumSetPortDirection  (u8 copy_u8PortId , u8 copy_u8PortDirection)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	2d 97       	sbiw	r28, 0x0d	; 13
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <= DIO_PORTD)&&((copy_u8PortDirection == DIO_PORT_OUTPUT) || (copy_u8PortDirection == DIO_PORT_INPUT)))
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <DIO_enumSetPortDirection+0x24>
    1876:	89 c0       	rjmp	.+274    	; 0x198a <DIO_enumSetPortDirection+0x136>
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	8f 3f       	cpi	r24, 0xFF	; 255
    187c:	21 f0       	breq	.+8      	; 0x1886 <DIO_enumSetPortDirection+0x32>
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 23       	and	r24, r24
    1882:	09 f0       	breq	.+2      	; 0x1886 <DIO_enumSetPortDirection+0x32>
    1884:	82 c0       	rjmp	.+260    	; 0x198a <DIO_enumSetPortDirection+0x136>
	{
		switch(copy_u8PortId)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3d 87       	std	Y+13, r19	; 0x0d
    188e:	2c 87       	std	Y+12, r18	; 0x0c
    1890:	8c 85       	ldd	r24, Y+12	; 0x0c
    1892:	9d 85       	ldd	r25, Y+13	; 0x0d
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	91 05       	cpc	r25, r1
    1898:	71 f1       	breq	.+92     	; 0x18f6 <DIO_enumSetPortDirection+0xa2>
    189a:	2c 85       	ldd	r18, Y+12	; 0x0c
    189c:	3d 85       	ldd	r19, Y+13	; 0x0d
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f4       	brge	.+10     	; 0x18ae <DIO_enumSetPortDirection+0x5a>
    18a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f0       	breq	.+26     	; 0x18c6 <DIO_enumSetPortDirection+0x72>
    18ac:	6c c0       	rjmp	.+216    	; 0x1986 <DIO_enumSetPortDirection+0x132>
    18ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b0:	3d 85       	ldd	r19, Y+13	; 0x0d
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	b9 f1       	breq	.+110    	; 0x1926 <DIO_enumSetPortDirection+0xd2>
    18b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <DIO_enumSetPortDirection+0x70>
    18c2:	49 c0       	rjmp	.+146    	; 0x1956 <DIO_enumSetPortDirection+0x102>
    18c4:	60 c0       	rjmp	.+192    	; 0x1986 <DIO_enumSetPortDirection+0x132>
		{
		  case DIO_PORTA :
			  switch(copy_u8PortDirection)
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3b 87       	std	Y+11, r19	; 0x0b
    18ce:	2a 87       	std	Y+10, r18	; 0x0a
    18d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	31 f0       	breq	.+12     	; 0x18e4 <DIO_enumSetPortDirection+0x90>
    18d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    18da:	3b 85       	ldd	r19, Y+11	; 0x0b
    18dc:	2f 3f       	cpi	r18, 0xFF	; 255
    18de:	31 05       	cpc	r19, r1
    18e0:	29 f0       	breq	.+10     	; 0x18ec <DIO_enumSetPortDirection+0x98>
    18e2:	54 c0       	rjmp	.+168    	; 0x198c <DIO_enumSetPortDirection+0x138>
			  {
			    case DIO_PORT_INPUT  : DDRA_REG = 0x00; break;
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	10 82       	st	Z, r1
    18ea:	50 c0       	rjmp	.+160    	; 0x198c <DIO_enumSetPortDirection+0x138>
			    case DIO_PORT_OUTPUT : DDRA_REG = 0xFF; break;
    18ec:	ea e3       	ldi	r30, 0x3A	; 58
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	80 83       	st	Z, r24
    18f4:	4b c0       	rjmp	.+150    	; 0x198c <DIO_enumSetPortDirection+0x138>
			  } break;
		  case DIO_PORTB :
			  switch(copy_u8PortDirection)
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	39 87       	std	Y+9, r19	; 0x09
    18fe:	28 87       	std	Y+8, r18	; 0x08
    1900:	88 85       	ldd	r24, Y+8	; 0x08
    1902:	99 85       	ldd	r25, Y+9	; 0x09
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	31 f0       	breq	.+12     	; 0x1914 <DIO_enumSetPortDirection+0xc0>
    1908:	28 85       	ldd	r18, Y+8	; 0x08
    190a:	39 85       	ldd	r19, Y+9	; 0x09
    190c:	2f 3f       	cpi	r18, 0xFF	; 255
    190e:	31 05       	cpc	r19, r1
    1910:	29 f0       	breq	.+10     	; 0x191c <DIO_enumSetPortDirection+0xc8>
    1912:	3c c0       	rjmp	.+120    	; 0x198c <DIO_enumSetPortDirection+0x138>
		      {
		       case DIO_PORT_INPUT  : DDRB_REG = 0x00; break;
    1914:	e7 e3       	ldi	r30, 0x37	; 55
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	10 82       	st	Z, r1
    191a:	38 c0       	rjmp	.+112    	; 0x198c <DIO_enumSetPortDirection+0x138>
		       case DIO_PORT_OUTPUT : DDRB_REG = 0xFF; break;
    191c:	e7 e3       	ldi	r30, 0x37	; 55
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	80 83       	st	Z, r24
    1924:	33 c0       	rjmp	.+102    	; 0x198c <DIO_enumSetPortDirection+0x138>
		      } break;
		  case DIO_PORTC :
			  switch(copy_u8PortDirection)
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3f 83       	std	Y+7, r19	; 0x07
    192e:	2e 83       	std	Y+6, r18	; 0x06
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	31 f0       	breq	.+12     	; 0x1944 <DIO_enumSetPortDirection+0xf0>
    1938:	2e 81       	ldd	r18, Y+6	; 0x06
    193a:	3f 81       	ldd	r19, Y+7	; 0x07
    193c:	2f 3f       	cpi	r18, 0xFF	; 255
    193e:	31 05       	cpc	r19, r1
    1940:	29 f0       	breq	.+10     	; 0x194c <DIO_enumSetPortDirection+0xf8>
    1942:	24 c0       	rjmp	.+72     	; 0x198c <DIO_enumSetPortDirection+0x138>
			  {
			  	case DIO_PORT_INPUT  : DDRC_REG = 0x00; break;
    1944:	e4 e3       	ldi	r30, 0x34	; 52
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	10 82       	st	Z, r1
    194a:	20 c0       	rjmp	.+64     	; 0x198c <DIO_enumSetPortDirection+0x138>
			  	case DIO_PORT_OUTPUT : DDRC_REG = 0xFF; break;
    194c:	e4 e3       	ldi	r30, 0x34	; 52
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	80 83       	st	Z, r24
    1954:	1b c0       	rjmp	.+54     	; 0x198c <DIO_enumSetPortDirection+0x138>
			  } break;
		  case DIO_PORTD :
			  switch(copy_u8PortDirection)
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3d 83       	std	Y+5, r19	; 0x05
    195e:	2c 83       	std	Y+4, r18	; 0x04
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	31 f0       	breq	.+12     	; 0x1974 <DIO_enumSetPortDirection+0x120>
    1968:	2c 81       	ldd	r18, Y+4	; 0x04
    196a:	3d 81       	ldd	r19, Y+5	; 0x05
    196c:	2f 3f       	cpi	r18, 0xFF	; 255
    196e:	31 05       	cpc	r19, r1
    1970:	29 f0       	breq	.+10     	; 0x197c <DIO_enumSetPortDirection+0x128>
    1972:	0c c0       	rjmp	.+24     	; 0x198c <DIO_enumSetPortDirection+0x138>
			  {
			  	 case DIO_PORT_INPUT  : DDRD_REG = 0x00; break;
    1974:	e1 e3       	ldi	r30, 0x31	; 49
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	10 82       	st	Z, r1
    197a:	08 c0       	rjmp	.+16     	; 0x198c <DIO_enumSetPortDirection+0x138>
			  	 case DIO_PORT_OUTPUT : DDRD_REG = 0xFF; break;
    197c:	e1 e3       	ldi	r30, 0x31	; 49
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	80 83       	st	Z, r24
    1984:	03 c0       	rjmp	.+6      	; 0x198c <DIO_enumSetPortDirection+0x138>
			  } break;
		  default        : LOC_enumstate=DIO_NOK;           break;
    1986:	19 82       	std	Y+1, r1	; 0x01
    1988:	01 c0       	rjmp	.+2      	; 0x198c <DIO_enumSetPortDirection+0x138>
		}
	}
	else
	{
		LOC_enumstate=DIO_NOK;
    198a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumstate;
    198c:	89 81       	ldd	r24, Y+1	; 0x01

}
    198e:	2d 96       	adiw	r28, 0x0d	; 13
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <DIO_enumSetPortValue>:
 * Parameters :
  	  =>Copy_u8PortId --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PortValue --> Port Value [ DIO_HIGH , DIO_LOW ]
 */
DIO_Errorstatus DIO_enumSetPortValue      (u8 copy_u8PortId , u8 copy_u8PortValue)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <DIO_enumSetPortValue+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_enumSetPortValue+0x8>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01
	if ( (copy_u8PortId <= DIO_PORTD) && ( (copy_u8PortValue<=255) || (copy_u8PortValue==DIO_PORT_LOW) || (copy_u8PortValue==DIO_PORT_HIGH) ) )
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	a8 f5       	brcc	.+106    	; 0x1a26 <DIO_enumSetPortValue+0x86>
		{
			switch(copy_u8PortId)
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3d 83       	std	Y+5, r19	; 0x05
    19c4:	2c 83       	std	Y+4, r18	; 0x04
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <DIO_enumSetPortValue+0x64>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <DIO_enumSetPortValue+0x44>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <DIO_enumSetPortValue+0x5a>
    19e2:	1f c0       	rjmp	.+62     	; 0x1a22 <DIO_enumSetPortValue+0x82>
    19e4:	2c 81       	ldd	r18, Y+4	; 0x04
    19e6:	3d 81       	ldd	r19, Y+5	; 0x05
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <DIO_enumSetPortValue+0x6e>
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <DIO_enumSetPortValue+0x78>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <DIO_enumSetPortValue+0x82>
			{
				  case DIO_PORTA : PORTA_REG = copy_u8PortValue; break;
    19fa:	eb e3       	ldi	r30, 0x3B	; 59
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	80 83       	st	Z, r24
    1a02:	12 c0       	rjmp	.+36     	; 0x1a28 <DIO_enumSetPortValue+0x88>
				  case DIO_PORTB : PORTB_REG = copy_u8PortValue; break;
    1a04:	e8 e3       	ldi	r30, 0x38	; 56
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	80 83       	st	Z, r24
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <DIO_enumSetPortValue+0x88>
				  case DIO_PORTC : PORTC_REG = copy_u8PortValue; break;
    1a0e:	e5 e3       	ldi	r30, 0x35	; 53
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	80 83       	st	Z, r24
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <DIO_enumSetPortValue+0x88>
				  case DIO_PORTD : PORTD_REG = copy_u8PortValue; break;
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	80 83       	st	Z, r24
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <DIO_enumSetPortValue+0x88>
				  default        : LOC_enumstate=DIO_NOK;        break;
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <DIO_enumSetPortValue+0x88>
			}
		}
		else
		{
			LOC_enumstate=DIO_NOK;
    1a26:	19 82       	std	Y+1, r1	; 0x01
		}
		return LOC_enumstate;
    1a28:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <DIO_enumGetPortValue>:
 * Parameters :
  	  =>Copy_u8PortId --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>*copy_u8PortValue --> pointer to recieve the port value
 */
DIO_Errorstatus DIO_enumGetPortValue      (u8 copy_u8PortId , u8 *copy_u8PortValue)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_enumGetPortValue+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_enumGetPortValue+0x8>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <DIO_enumGetPortValue+0xa>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	8a 83       	std	Y+2, r24	; 0x02
    1a4a:	7c 83       	std	Y+4, r23	; 0x04
    1a4c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_PORTD)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	e8 f5       	brcc	.+122    	; 0x1ad2 <DIO_enumGetPortValue+0x98>
	{
		switch (copy_u8PortId)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3e 83       	std	Y+6, r19	; 0x06
    1a60:	2d 83       	std	Y+5, r18	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	e1 f0       	breq	.+56     	; 0x1aa4 <DIO_enumGetPortValue+0x6a>
    1a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_enumGetPortValue+0x46>
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_enumGetPortValue+0x5c>
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <DIO_enumGetPortValue+0x94>
    1a80:	2d 81       	ldd	r18, Y+5	; 0x05
    1a82:	3e 81       	ldd	r19, Y+6	; 0x06
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	a1 f0       	breq	.+40     	; 0x1ab2 <DIO_enumGetPortValue+0x78>
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	b1 f0       	breq	.+44     	; 0x1ac0 <DIO_enumGetPortValue+0x86>
    1a94:	1c c0       	rjmp	.+56     	; 0x1ace <DIO_enumGetPortValue+0x94>
		{
		    case DIO_PORTA : *copy_u8PortValue =PINA_REG ;break;
    1a96:	e9 e3       	ldi	r30, 0x39	; 57
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa0:	80 83       	st	Z, r24
    1aa2:	18 c0       	rjmp	.+48     	; 0x1ad4 <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTB : *copy_u8PortValue =PINB_REG ;break;
    1aa4:	e6 e3       	ldi	r30, 0x36	; 54
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1aac:	fc 81       	ldd	r31, Y+4	; 0x04
    1aae:	80 83       	st	Z, r24
    1ab0:	11 c0       	rjmp	.+34     	; 0x1ad4 <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTC : *copy_u8PortValue =PINC_REG ;break;
    1ab2:	e3 e3       	ldi	r30, 0x33	; 51
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aba:	fc 81       	ldd	r31, Y+4	; 0x04
    1abc:	80 83       	st	Z, r24
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTD : *copy_u8PortValue =PIND_REG ;break;
    1ac0:	e0 e3       	ldi	r30, 0x30	; 48
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aca:	80 83       	st	Z, r24
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <DIO_enumGetPortValue+0x9a>
		    default        : LOC_enumstate=DIO_NOK;       break;
    1ace:	19 82       	std	Y+1, r1	; 0x01
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <DIO_enumGetPortValue+0x9a>
		}
	}
	else
	{
		LOC_enumstate=DIO_NOK;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumstate;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad6:	26 96       	adiw	r28, 0x06	; 6
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <DIO_enumTogglePortValue>:
  	  =>Copy_u8PortId --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]


 */
DIO_Errorstatus DIO_enumTogglePortValue   (u8 copy_u8PortId )
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <DIO_enumTogglePortValue+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <DIO_enumTogglePortValue+0x8>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_PORTD)
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <DIO_enumTogglePortValue+0x1a>
    1b00:	41 c0       	rjmp	.+130    	; 0x1b84 <DIO_enumTogglePortValue+0x9c>
	{
		switch(copy_u8PortId)
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3c 83       	std	Y+4, r19	; 0x04
    1b0a:	2b 83       	std	Y+3, r18	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	e9 f0       	breq	.+58     	; 0x1b50 <DIO_enumTogglePortValue+0x68>
    1b16:	2b 81       	ldd	r18, Y+3	; 0x03
    1b18:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <DIO_enumTogglePortValue+0x42>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <DIO_enumTogglePortValue+0x58>
    1b28:	2b c0       	rjmp	.+86     	; 0x1b80 <DIO_enumTogglePortValue+0x98>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	b1 f0       	breq	.+44     	; 0x1b60 <DIO_enumTogglePortValue+0x78>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	c9 f0       	breq	.+50     	; 0x1b70 <DIO_enumTogglePortValue+0x88>
    1b3e:	20 c0       	rjmp	.+64     	; 0x1b80 <DIO_enumTogglePortValue+0x98>
		{
			 case DIO_PORTA :PORTA_REG = ~PORTA_REG ;break;
    1b40:	ab e3       	ldi	r26, 0x3B	; 59
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 95       	com	r24
    1b4c:	8c 93       	st	X, r24
    1b4e:	1b c0       	rjmp	.+54     	; 0x1b86 <DIO_enumTogglePortValue+0x9e>
			 case DIO_PORTB :PORTB_REG = ~PORTB_REG ;break;
    1b50:	a8 e3       	ldi	r26, 0x38	; 56
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 95       	com	r24
    1b5c:	8c 93       	st	X, r24
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <DIO_enumTogglePortValue+0x9e>
		     case DIO_PORTC :PORTC_REG = ~PORTC_REG ;break;
    1b60:	a5 e3       	ldi	r26, 0x35	; 53
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e3       	ldi	r30, 0x35	; 53
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 95       	com	r24
    1b6c:	8c 93       	st	X, r24
    1b6e:	0b c0       	rjmp	.+22     	; 0x1b86 <DIO_enumTogglePortValue+0x9e>
			 case DIO_PORTD :PORTD_REG = ~PORTD_REG ;break;
    1b70:	a2 e3       	ldi	r26, 0x32	; 50
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e2 e3       	ldi	r30, 0x32	; 50
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 95       	com	r24
    1b7c:	8c 93       	st	X, r24
    1b7e:	03 c0       	rjmp	.+6      	; 0x1b86 <DIO_enumTogglePortValue+0x9e>
			 default        :LOC_enumstate=DIO_NOK;  break;
    1b80:	19 82       	std	Y+1, r1	; 0x01
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <DIO_enumTogglePortValue+0x9e>
		}
	}
	else
	{
		LOC_enumstate=DIO_NOK;
    1b84:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumstate;
    1b86:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <DIO_enumActivatePinInPUR>:

DIO_Errorstatus DIO_enumActivatePinInPUR  (u8 copy_u8PortId , u8 copy_u8PinId )
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_enumActivatePinInPUR+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_enumActivatePinInPUR+0x8>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
    1ba6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <DIO_enumActivatePinInPUR+0x1e>
    1bb2:	75 c0       	rjmp	.+234    	; 0x1c9e <DIO_enumActivatePinInPUR+0x108>
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	88 30       	cpi	r24, 0x08	; 8
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <DIO_enumActivatePinInPUR+0x26>
    1bba:	71 c0       	rjmp	.+226    	; 0x1c9e <DIO_enumActivatePinInPUR+0x108>
	{
		switch(copy_u8PortId)
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3d 83       	std	Y+5, r19	; 0x05
    1bc4:	2c 83       	std	Y+4, r18	; 0x04
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	49 f1       	breq	.+82     	; 0x1c22 <DIO_enumActivatePinInPUR+0x8c>
    1bd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <DIO_enumActivatePinInPUR+0x4e>
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <DIO_enumActivatePinInPUR+0x64>
    1be2:	5b c0       	rjmp	.+182    	; 0x1c9a <DIO_enumActivatePinInPUR+0x104>
    1be4:	2c 81       	ldd	r18, Y+4	; 0x04
    1be6:	3d 81       	ldd	r19, Y+5	; 0x05
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	71 f1       	breq	.+92     	; 0x1c4a <DIO_enumActivatePinInPUR+0xb4>
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	e9 f1       	breq	.+122    	; 0x1c72 <DIO_enumActivatePinInPUR+0xdc>
    1bf8:	50 c0       	rjmp	.+160    	; 0x1c9a <DIO_enumActivatePinInPUR+0x104>
		{
		     case DIO_PORTA :SET_BIT(PORTA_REG,copy_u8PinId);break;
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_enumActivatePinInPUR+0x82>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_enumActivatePinInPUR+0x7e>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <DIO_enumActivatePinInPUR+0x10a>
			 case DIO_PORTB :SET_BIT(PORTB_REG,copy_u8PinId);break;
    1c22:	a8 e3       	ldi	r26, 0x38	; 56
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e8 e3       	ldi	r30, 0x38	; 56
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <DIO_enumActivatePinInPUR+0xaa>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <DIO_enumActivatePinInPUR+0xa6>
    1c44:	84 2b       	or	r24, r20
    1c46:	8c 93       	st	X, r24
    1c48:	2b c0       	rjmp	.+86     	; 0x1ca0 <DIO_enumActivatePinInPUR+0x10a>
			 case DIO_PORTC :SET_BIT(PORTC_REG,copy_u8PinId);break;
    1c4a:	a5 e3       	ldi	r26, 0x35	; 53
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e5 e3       	ldi	r30, 0x35	; 53
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 2e       	mov	r0, r18
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_enumActivatePinInPUR+0xd2>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	0a 94       	dec	r0
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <DIO_enumActivatePinInPUR+0xce>
    1c6c:	84 2b       	or	r24, r20
    1c6e:	8c 93       	st	X, r24
    1c70:	17 c0       	rjmp	.+46     	; 0x1ca0 <DIO_enumActivatePinInPUR+0x10a>
			 case DIO_PORTD :SET_BIT(PORTD_REG,copy_u8PinId);break;
    1c72:	a2 e3       	ldi	r26, 0x32	; 50
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e2 e3       	ldi	r30, 0x32	; 50
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 2e       	mov	r0, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <DIO_enumActivatePinInPUR+0xfa>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <DIO_enumActivatePinInPUR+0xf6>
    1c94:	84 2b       	or	r24, r20
    1c96:	8c 93       	st	X, r24
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <DIO_enumActivatePinInPUR+0x10a>
			 default        :LOC_enumstate=DIO_NOK;          break;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <DIO_enumActivatePinInPUR+0x10a>
		}
	}
	else
	{
		LOC_enumstate=DIO_NOK;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumstate;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <DIO_enumActivePortInPullUpResistance>:


DIO_Errorstatus DIO_enumActivePortInPullUpResistance(u8 copy_u8PortId)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <DIO_enumActivePortInPullUpResistance+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <DIO_enumActivePortInPullUpResistance+0x8>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Errorstatus LOC_enumstate=DIO_OK;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
		if(copy_u8PortId<=DIO_PORTD)
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	98 f5       	brcc	.+102    	; 0x1d30 <DIO_enumActivePortInPullUpResistance+0x7e>
		{
			switch(copy_u8PortId)
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3c 83       	std	Y+4, r19	; 0x04
    1cd2:	2b 83       	std	Y+3, r18	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	d1 f0       	breq	.+52     	; 0x1d12 <DIO_enumActivePortInPullUpResistance+0x60>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <DIO_enumActivePortInPullUpResistance+0x40>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <DIO_enumActivePortInPullUpResistance+0x56>
    1cf0:	20 c0       	rjmp	.+64     	; 0x1d32 <DIO_enumActivePortInPullUpResistance+0x80>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	81 f0       	breq	.+32     	; 0x1d1c <DIO_enumActivePortInPullUpResistance+0x6a>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	81 f0       	breq	.+32     	; 0x1d26 <DIO_enumActivePortInPullUpResistance+0x74>
    1d06:	15 c0       	rjmp	.+42     	; 0x1d32 <DIO_enumActivePortInPullUpResistance+0x80>
			{
			    case DIO_PORTA: PORTA_REG = 0xFF; break;
    1d08:	eb e3       	ldi	r30, 0x3B	; 59
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	80 83       	st	Z, r24
    1d10:	10 c0       	rjmp	.+32     	; 0x1d32 <DIO_enumActivePortInPullUpResistance+0x80>
			    case DIO_PORTB: PORTB_REG = 0xFF; break;
    1d12:	e8 e3       	ldi	r30, 0x38	; 56
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	80 83       	st	Z, r24
    1d1a:	0b c0       	rjmp	.+22     	; 0x1d32 <DIO_enumActivePortInPullUpResistance+0x80>
			    case DIO_PORTC: PORTC_REG = 0xFF; break;
    1d1c:	e5 e3       	ldi	r30, 0x35	; 53
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	8f ef       	ldi	r24, 0xFF	; 255
    1d22:	80 83       	st	Z, r24
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <DIO_enumActivePortInPullUpResistance+0x80>
			    case DIO_PORTD: PORTD_REG = 0xFF; break;
    1d26:	e2 e3       	ldi	r30, 0x32	; 50
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	80 83       	st	Z, r24
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <DIO_enumActivePortInPullUpResistance+0x80>
		    }
		}
		else
		{
			LOC_enumstate=DIO_NOK;
    1d30:	19 82       	std	Y+1, r1	; 0x01
		}
		return LOC_enumstate;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <GI_voidEnable>:
#include "GI_interface.h"
#include "GI_register.h"


void GI_voidEnable      (void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG , GIE);
    1d4a:	af e5       	ldi	r26, 0x5F	; 95
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ef e5       	ldi	r30, 0x5F	; 95
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	80 68       	ori	r24, 0x80	; 128
    1d56:	8c 93       	st	X, r24
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <GI_voidDisable>:
void GI_voidDisable    (void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG , GIE);
    1d66:	af e5       	ldi	r26, 0x5F	; 95
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ef e5       	ldi	r30, 0x5F	; 95
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 77       	andi	r24, 0x7F	; 127
    1d72:	8c 93       	st	X, r24
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <LCD_voidInit>:
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
LCD_voidInit               (void)
{
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	cc 54       	subi	r28, 0x4C	; 76
    1d88:	d0 40       	sbci	r29, 0x00	; 0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
	// Intialize LCD pins As OutPut Pins
		DIO_enumSetPinDirection(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
		DIO_enumSetPinDirection(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
		DIO_enumSetPinDirection(LCD_EN_PORT ,LCD_EN_PIN, DIO_PIN_OUTPUT);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	63 e0       	ldi	r22, 0x03	; 3
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
		DIO_enumSetPinDirection(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	64 e0       	ldi	r22, 0x04	; 4
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
		DIO_enumSetPinDirection(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	65 e0       	ldi	r22, 0x05	; 5
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
		DIO_enumSetPinDirection(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	66 e0       	ldi	r22, 0x06	; 6
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
		DIO_enumSetPinDirection(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	67 e0       	ldi	r22, 0x07	; 7
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e7 5b       	subi	r30, 0xB7	; 183
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	ac e0       	ldi	r26, 0x0C	; 12
    1de6:	b2 e4       	ldi	r27, 0x42	; 66
    1de8:	80 83       	st	Z, r24
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	a2 83       	std	Z+2, r26	; 0x02
    1dee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	8e 01       	movw	r16, r28
    1df2:	0b 5b       	subi	r16, 0xBB	; 187
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	fe 01       	movw	r30, r28
    1df8:	e7 5b       	subi	r30, 0xB7	; 183
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a e7       	ldi	r20, 0x7A	; 122
    1e0a:	55 e4       	ldi	r21, 0x45	; 69
    1e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	f8 01       	movw	r30, r16
    1e16:	80 83       	st	Z, r24
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	a2 83       	std	Z+2, r26	; 0x02
    1e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1e:	fe 01       	movw	r30, r28
    1e20:	eb 5b       	subi	r30, 0xBB	; 187
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	60 81       	ld	r22, Z
    1e26:	71 81       	ldd	r23, Z+1	; 0x01
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	44 f4       	brge	.+16     	; 0x1e4c <LCD_voidInit+0xd2>
		__ticks = 1;
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ed 5b       	subi	r30, 0xBD	; 189
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	80 83       	st	Z, r24
    1e4a:	64 c0       	rjmp	.+200    	; 0x1f14 <LCD_voidInit+0x19a>
	else if (__tmp > 65535)
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	eb 5b       	subi	r30, 0xBB	; 187
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	0c f0       	brlt	.+2      	; 0x1e6c <LCD_voidInit+0xf2>
    1e6a:	43 c0       	rjmp	.+134    	; 0x1ef2 <LCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e7 5b       	subi	r30, 0xB7	; 183
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	82 81       	ldd	r24, Z+2	; 0x02
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e2       	ldi	r20, 0x20	; 32
    1e80:	51 e4       	ldi	r21, 0x41	; 65
    1e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	0d 5b       	subi	r16, 0xBD	; 189
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	1f c0       	rjmp	.+62     	; 0x1ee2 <LCD_voidInit+0x168>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ef 5b       	subi	r30, 0xBF	; 191
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 e9       	ldi	r24, 0x90	; 144
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ef 5b       	subi	r30, 0xBF	; 191
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_voidInit+0x142>
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ef 5b       	subi	r30, 0xBF	; 191
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	de 01       	movw	r26, r28
    1ecc:	ad 5b       	subi	r26, 0xBD	; 189
    1ece:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ed 5b       	subi	r30, 0xBD	; 189
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	11 96       	adiw	r26, 0x01	; 1
    1ede:	9c 93       	st	X, r25
    1ee0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ed 5b       	subi	r30, 0xBD	; 189
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	d1 f6       	brne	.-76     	; 0x1ea4 <LCD_voidInit+0x12a>
    1ef0:	24 c0       	rjmp	.+72     	; 0x1f3a <LCD_voidInit+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	8e 01       	movw	r16, r28
    1ef4:	0d 5b       	subi	r16, 0xBD	; 189
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	eb 5b       	subi	r30, 0xBB	; 187
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	f8 01       	movw	r30, r16
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
    1f14:	fe 01       	movw	r30, r28
    1f16:	ed 5b       	subi	r30, 0xBD	; 189
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ff 96       	adiw	r30, 0x3f	; 63
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
    1f26:	fe 01       	movw	r30, r28
    1f28:	ff 96       	adiw	r30, 0x3f	; 63
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_voidInit+0x1b4>
    1f32:	fe 01       	movw	r30, r28
    1f34:	ff 96       	adiw	r30, 0x3f	; 63
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24

		_delay_ms(35);

		/* Function Set (2Lines, 5*7 font)*/
			// set Rs pin = 0 (command)
			DIO_enumSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
			// set RW pin = 0 (write)
			DIO_enumSetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>

			PRV_voidWriteHalfPort(0b0010);
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <PRV_voidWriteHalfPort>
			PRV_voidEnableTriggerWrite();
    1f54:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <PRV_voidEnableTriggerWrite>
			LCD_voidSendCommand(0b00101000);
    1f58:	88 e2       	ldi	r24, 0x28	; 40
    1f5a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a4 e3       	ldi	r26, 0x34	; 52
    1f64:	b2 e4       	ldi	r27, 0x42	; 66
    1f66:	8b af       	std	Y+59, r24	; 0x3b
    1f68:	9c af       	std	Y+60, r25	; 0x3c
    1f6a:	ad af       	std	Y+61, r26	; 0x3d
    1f6c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f6e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f70:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f76:	2b ea       	ldi	r18, 0xAB	; 171
    1f78:	3a ea       	ldi	r19, 0xAA	; 170
    1f7a:	4a ea       	ldi	r20, 0xAA	; 170
    1f7c:	50 e4       	ldi	r21, 0x40	; 64
    1f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8f ab       	std	Y+55, r24	; 0x37
    1f88:	98 af       	std	Y+56, r25	; 0x38
    1f8a:	a9 af       	std	Y+57, r26	; 0x39
    1f8c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f8e:	6f a9       	ldd	r22, Y+55	; 0x37
    1f90:	78 ad       	ldd	r23, Y+56	; 0x38
    1f92:	89 ad       	ldd	r24, Y+57	; 0x39
    1f94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	1c f4       	brge	.+6      	; 0x1fac <LCD_voidInit+0x232>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	8e ab       	std	Y+54, r24	; 0x36
    1faa:	91 c0       	rjmp	.+290    	; 0x20ce <LCD_voidInit+0x354>
	else if (__tmp > 255)
    1fac:	6f a9       	ldd	r22, Y+55	; 0x37
    1fae:	78 ad       	ldd	r23, Y+56	; 0x38
    1fb0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	53 e4       	ldi	r21, 0x43	; 67
    1fbc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	0c f0       	brlt	.+2      	; 0x1fc6 <LCD_voidInit+0x24c>
    1fc4:	7b c0       	rjmp	.+246    	; 0x20bc <LCD_voidInit+0x342>
	{
		_delay_ms(__us / 1000.0);
    1fc6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fc8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fcc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8a ab       	std	Y+50, r24	; 0x32
    1fe0:	9b ab       	std	Y+51, r25	; 0x33
    1fe2:	ac ab       	std	Y+52, r26	; 0x34
    1fe4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	6a a9       	ldd	r22, Y+50	; 0x32
    1fe8:	7b a9       	ldd	r23, Y+51	; 0x33
    1fea:	8c a9       	ldd	r24, Y+52	; 0x34
    1fec:	9d a9       	ldd	r25, Y+53	; 0x35
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	55 e4       	ldi	r21, 0x45	; 69
    1ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8e a7       	std	Y+46, r24	; 0x2e
    2000:	9f a7       	std	Y+47, r25	; 0x2f
    2002:	a8 ab       	std	Y+48, r26	; 0x30
    2004:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2006:	6e a5       	ldd	r22, Y+46	; 0x2e
    2008:	7f a5       	ldd	r23, Y+47	; 0x2f
    200a:	88 a9       	ldd	r24, Y+48	; 0x30
    200c:	99 a9       	ldd	r25, Y+49	; 0x31
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <LCD_voidInit+0x2ae>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9d a7       	std	Y+45, r25	; 0x2d
    2024:	8c a7       	std	Y+44, r24	; 0x2c
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    2028:	6e a5       	ldd	r22, Y+46	; 0x2e
    202a:	7f a5       	ldd	r23, Y+47	; 0x2f
    202c:	88 a9       	ldd	r24, Y+48	; 0x30
    202e:	99 a9       	ldd	r25, Y+49	; 0x31
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	6a a9       	ldd	r22, Y+50	; 0x32
    2042:	7b a9       	ldd	r23, Y+51	; 0x33
    2044:	8c a9       	ldd	r24, Y+52	; 0x34
    2046:	9d a9       	ldd	r25, Y+53	; 0x35
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9d a7       	std	Y+45, r25	; 0x2d
    2066:	8c a7       	std	Y+44, r24	; 0x2c
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <LCD_voidInit+0x30e>
    206a:	80 e9       	ldi	r24, 0x90	; 144
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	9b a7       	std	Y+43, r25	; 0x2b
    2070:	8a a7       	std	Y+42, r24	; 0x2a
    2072:	8a a5       	ldd	r24, Y+42	; 0x2a
    2074:	9b a5       	ldd	r25, Y+43	; 0x2b
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_voidInit+0x2fc>
    207a:	9b a7       	std	Y+43, r25	; 0x2b
    207c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2080:	9d a5       	ldd	r25, Y+45	; 0x2d
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	9d a7       	std	Y+45, r25	; 0x2d
    2086:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8c a5       	ldd	r24, Y+44	; 0x2c
    208a:	9d a5       	ldd	r25, Y+45	; 0x2d
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <LCD_voidInit+0x2f0>
    2090:	24 c0       	rjmp	.+72     	; 0x20da <LCD_voidInit+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	6e a5       	ldd	r22, Y+46	; 0x2e
    2094:	7f a5       	ldd	r23, Y+47	; 0x2f
    2096:	88 a9       	ldd	r24, Y+48	; 0x30
    2098:	99 a9       	ldd	r25, Y+49	; 0x31
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9d a7       	std	Y+45, r25	; 0x2d
    20a4:	8c a7       	std	Y+44, r24	; 0x2c
    20a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    20aa:	99 a7       	std	Y+41, r25	; 0x29
    20ac:	88 a7       	std	Y+40, r24	; 0x28
    20ae:	88 a5       	ldd	r24, Y+40	; 0x28
    20b0:	99 a5       	ldd	r25, Y+41	; 0x29
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_voidInit+0x338>
    20b6:	99 a7       	std	Y+41, r25	; 0x29
    20b8:	88 a7       	std	Y+40, r24	; 0x28
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_voidInit+0x360>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20bc:	6f a9       	ldd	r22, Y+55	; 0x37
    20be:	78 ad       	ldd	r23, Y+56	; 0x38
    20c0:	89 ad       	ldd	r24, Y+57	; 0x39
    20c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    20c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8e ab       	std	Y+54, r24	; 0x36
    20ce:	8e a9       	ldd	r24, Y+54	; 0x36
    20d0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d2:	8f a1       	ldd	r24, Y+39	; 0x27
    20d4:	8a 95       	dec	r24
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_voidInit+0x35a>
    20d8:	8f a3       	std	Y+39, r24	; 0x27
			_delay_us(45);

			/* Display On/Off Control (DisplayOn, Cursor on, Blink on) */
			LCD_voidSendCommand(0b00001111);
    20da:	8f e0       	ldi	r24, 0x0F	; 15
    20dc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a4 e3       	ldi	r26, 0x34	; 52
    20e6:	b2 e4       	ldi	r27, 0x42	; 66
    20e8:	8b a3       	std	Y+35, r24	; 0x23
    20ea:	9c a3       	std	Y+36, r25	; 0x24
    20ec:	ad a3       	std	Y+37, r26	; 0x25
    20ee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f0:	6b a1       	ldd	r22, Y+35	; 0x23
    20f2:	7c a1       	ldd	r23, Y+36	; 0x24
    20f4:	8d a1       	ldd	r24, Y+37	; 0x25
    20f6:	9e a1       	ldd	r25, Y+38	; 0x26
    20f8:	2b ea       	ldi	r18, 0xAB	; 171
    20fa:	3a ea       	ldi	r19, 0xAA	; 170
    20fc:	4a ea       	ldi	r20, 0xAA	; 170
    20fe:	50 e4       	ldi	r21, 0x40	; 64
    2100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
    210a:	98 a3       	std	Y+32, r25	; 0x20
    210c:	a9 a3       	std	Y+33, r26	; 0x21
    210e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2110:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2112:	78 a1       	ldd	r23, Y+32	; 0x20
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	1c f4       	brge	.+6      	; 0x212e <LCD_voidInit+0x3b4>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	8e 8f       	std	Y+30, r24	; 0x1e
    212c:	91 c0       	rjmp	.+290    	; 0x2250 <LCD_voidInit+0x4d6>
	else if (__tmp > 255)
    212e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2130:	78 a1       	ldd	r23, Y+32	; 0x20
    2132:	89 a1       	ldd	r24, Y+33	; 0x21
    2134:	9a a1       	ldd	r25, Y+34	; 0x22
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	53 e4       	ldi	r21, 0x43	; 67
    213e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	0c f0       	brlt	.+2      	; 0x2148 <LCD_voidInit+0x3ce>
    2146:	7b c0       	rjmp	.+246    	; 0x223e <LCD_voidInit+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    2148:	6b a1       	ldd	r22, Y+35	; 0x23
    214a:	7c a1       	ldd	r23, Y+36	; 0x24
    214c:	8d a1       	ldd	r24, Y+37	; 0x25
    214e:	9e a1       	ldd	r25, Y+38	; 0x26
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8a 8f       	std	Y+26, r24	; 0x1a
    2162:	9b 8f       	std	Y+27, r25	; 0x1b
    2164:	ac 8f       	std	Y+28, r26	; 0x1c
    2166:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	6a 8d       	ldd	r22, Y+26	; 0x1a
    216a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    216c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    216e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a e7       	ldi	r20, 0x7A	; 122
    2176:	55 e4       	ldi	r21, 0x45	; 69
    2178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8e 8b       	std	Y+22, r24	; 0x16
    2182:	9f 8b       	std	Y+23, r25	; 0x17
    2184:	a8 8f       	std	Y+24, r26	; 0x18
    2186:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2188:	6e 89       	ldd	r22, Y+22	; 0x16
    218a:	7f 89       	ldd	r23, Y+23	; 0x17
    218c:	88 8d       	ldd	r24, Y+24	; 0x18
    218e:	99 8d       	ldd	r25, Y+25	; 0x19
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <LCD_voidInit+0x430>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9d 8b       	std	Y+21, r25	; 0x15
    21a6:	8c 8b       	std	Y+20, r24	; 0x14
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <LCD_voidInit+0x4ae>
	else if (__tmp > 65535)
    21aa:	6e 89       	ldd	r22, Y+22	; 0x16
    21ac:	7f 89       	ldd	r23, Y+23	; 0x17
    21ae:	88 8d       	ldd	r24, Y+24	; 0x18
    21b0:	99 8d       	ldd	r25, Y+25	; 0x19
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <LCD_voidInit+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9d 8b       	std	Y+21, r25	; 0x15
    21e8:	8c 8b       	std	Y+20, r24	; 0x14
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <LCD_voidInit+0x490>
    21ec:	80 e9       	ldi	r24, 0x90	; 144
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	9b 8b       	std	Y+19, r25	; 0x13
    21f2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f4:	8a 89       	ldd	r24, Y+18	; 0x12
    21f6:	9b 89       	ldd	r25, Y+19	; 0x13
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_voidInit+0x47e>
    21fc:	9b 8b       	std	Y+19, r25	; 0x13
    21fe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	8c 89       	ldd	r24, Y+20	; 0x14
    2202:	9d 89       	ldd	r25, Y+21	; 0x15
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9d 8b       	std	Y+21, r25	; 0x15
    2208:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	8c 89       	ldd	r24, Y+20	; 0x14
    220c:	9d 89       	ldd	r25, Y+21	; 0x15
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <LCD_voidInit+0x472>
    2212:	24 c0       	rjmp	.+72     	; 0x225c <LCD_voidInit+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	6e 89       	ldd	r22, Y+22	; 0x16
    2216:	7f 89       	ldd	r23, Y+23	; 0x17
    2218:	88 8d       	ldd	r24, Y+24	; 0x18
    221a:	99 8d       	ldd	r25, Y+25	; 0x19
    221c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9d 8b       	std	Y+21, r25	; 0x15
    2226:	8c 8b       	std	Y+20, r24	; 0x14
    2228:	8c 89       	ldd	r24, Y+20	; 0x14
    222a:	9d 89       	ldd	r25, Y+21	; 0x15
    222c:	99 8b       	std	Y+17, r25	; 0x11
    222e:	88 8b       	std	Y+16, r24	; 0x10
    2230:	88 89       	ldd	r24, Y+16	; 0x10
    2232:	99 89       	ldd	r25, Y+17	; 0x11
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_voidInit+0x4ba>
    2238:	99 8b       	std	Y+17, r25	; 0x11
    223a:	88 8b       	std	Y+16, r24	; 0x10
    223c:	0f c0       	rjmp	.+30     	; 0x225c <LCD_voidInit+0x4e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    223e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2240:	78 a1       	ldd	r23, Y+32	; 0x20
    2242:	89 a1       	ldd	r24, Y+33	; 0x21
    2244:	9a a1       	ldd	r25, Y+34	; 0x22
    2246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8e 8f       	std	Y+30, r24	; 0x1e
    2250:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2252:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	8a 95       	dec	r24
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_voidInit+0x4dc>
    225a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_us(45);

			/* Display Clear */
			LCD_voidSendCommand(Clear_Display );
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 e0       	ldi	r26, 0x00	; 0
    2268:	b0 e4       	ldi	r27, 0x40	; 64
    226a:	8b 87       	std	Y+11, r24	; 0x0b
    226c:	9c 87       	std	Y+12, r25	; 0x0c
    226e:	ad 87       	std	Y+13, r26	; 0x0d
    2270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	6b 85       	ldd	r22, Y+11	; 0x0b
    2274:	7c 85       	ldd	r23, Y+12	; 0x0c
    2276:	8d 85       	ldd	r24, Y+13	; 0x0d
    2278:	9e 85       	ldd	r25, Y+14	; 0x0e
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a e7       	ldi	r20, 0x7A	; 122
    2280:	55 e4       	ldi	r21, 0x45	; 69
    2282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8f 83       	std	Y+7, r24	; 0x07
    228c:	98 87       	std	Y+8, r25	; 0x08
    228e:	a9 87       	std	Y+9, r26	; 0x09
    2290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <LCD_voidInit+0x53a>
		__ticks = 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	3f c0       	rjmp	.+126    	; 0x2332 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	4c f5       	brge	.+82     	; 0x231e <LCD_voidInit+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <LCD_voidInit+0x59a>
    22f6:	80 e9       	ldi	r24, 0x90	; 144
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_voidInit+0x588>
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	69 f7       	brne	.-38     	; 0x22f6 <LCD_voidInit+0x57c>
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <LCD_voidInit+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_voidInit+0x5c4>
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			/* Entery Mode Set (Increment on, Shift off) */
			LCD_voidSendCommand(lcd_EntryMode);
    2346:	86 e0       	ldi	r24, 0x06	; 6
    2348:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
}
    234c:	c4 5b       	subi	r28, 0xB4	; 180
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <LCD_voidDisplayChar>:
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void LCD_voidDisplayChar           (u8 copy_u8Data)
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	0f 92       	push	r0
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	89 83       	std	Y+1, r24	; 0x01
	    // set Rs pin = 1 (data)
		DIO_enumSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>

		// set RW pin = 0 (write)
		DIO_enumSetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>

	    // Write The Most 4 bits Of data on Data Pins
		PRV_voidWriteHalfPort(copy_u8Data>>4);
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	82 95       	swap	r24
    2388:	8f 70       	andi	r24, 0x0F	; 15
    238a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    238e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <PRV_voidEnableTriggerWrite>

		// Write The Least 4 bits Of data on Data Pins
		PRV_voidWriteHalfPort(copy_u8Data);
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    2398:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <PRV_voidEnableTriggerWrite>

}
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_voidSendCommand>:
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (LCD_voidSendData)
*/
void LCD_voidSendCommand        (u8 copy_u8Command)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
	//set  RS pin =0 (COMMAND)
	DIO_enumSetPinValue  ( LCD_RS_PORT , LCD_RS_PIN , DIO_PIN_LOW  );
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	//set  RW pin =0 (Write)
	DIO_enumSetPinValue  ( LCD_RW_PORT , LCD_RW_PIN , DIO_PIN_LOW  );
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	62 e0       	ldi	r22, 0x02	; 2
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>

	/*Send MSB of data*/
	PRV_voidWriteHalfPort(copy_u8Command>>4);
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	82 95       	swap	r24
    23c8:	8f 70       	andi	r24, 0x0F	; 15
    23ca:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <PRV_voidWriteHalfPort>
	/*Enable*/
	PRV_voidEnableTriggerWrite();
    23ce:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <PRV_voidEnableTriggerWrite>
	/*Send LSB of data*/
	PRV_voidWriteHalfPort(copy_u8Command);
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <PRV_voidWriteHalfPort>
	/*Enable*/
	PRV_voidEnableTriggerWrite();
    23d8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <PRV_voidEnableTriggerWrite>

}
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <LCD_voidClear>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void LCD_voidClear                 (void)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	2e 97       	sbiw	r28, 0x0e	; 14
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand (Clear_Display);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e0       	ldi	r26, 0x00	; 0
    2404:	b0 e4       	ldi	r27, 0x40	; 64
    2406:	8b 87       	std	Y+11, r24	; 0x0b
    2408:	9c 87       	std	Y+12, r25	; 0x0c
    240a:	ad 87       	std	Y+13, r26	; 0x0d
    240c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a e7       	ldi	r20, 0x7A	; 122
    241c:	55 e4       	ldi	r21, 0x45	; 69
    241e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	98 87       	std	Y+8, r25	; 0x08
    242a:	a9 87       	std	Y+9, r26	; 0x09
    242c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <LCD_voidClear+0x6c>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <LCD_voidClear+0xcc>
    2492:	80 e9       	ldi	r24, 0x90	; 144
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_voidClear+0xba>
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <LCD_voidClear+0xae>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_voidClear+0xf6>
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    24e2:	2e 96       	adiw	r28, 0x0e	; 14
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <LCD_voidSendString>:
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void LCD_voidSendString            (u8 *copy_u8PtrString)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <LCD_voidSendString+0x6>
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	9b 83       	std	Y+3, r25	; 0x03
    2502:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Iterator=0;
    2504:	19 82       	std	Y+1, r1	; 0x01
    2506:	0e c0       	rjmp	.+28     	; 0x2524 <LCD_voidSendString+0x30>
	while (copy_u8PtrString[local_u8Iterator]!='\0')
	{
		LCD_voidDisplayChar (copy_u8PtrString[local_u8Iterator]);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	9b 81       	ldd	r25, Y+3	; 0x03
    2512:	fc 01       	movw	r30, r24
    2514:	e2 0f       	add	r30, r18
    2516:	f3 1f       	adc	r31, r19
    2518:	80 81       	ld	r24, Z
    251a:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_voidDisplayChar>
		local_u8Iterator++;
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	89 83       	std	Y+1, r24	; 0x01
* return : nothing
*/
void LCD_voidSendString            (u8 *copy_u8PtrString)
{
	u8 local_u8Iterator=0;
	while (copy_u8PtrString[local_u8Iterator]!='\0')
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	fc 01       	movw	r30, r24
    2530:	e2 0f       	add	r30, r18
    2532:	f3 1f       	adc	r31, r19
    2534:	80 81       	ld	r24, Z
    2536:	88 23       	and	r24, r24
    2538:	39 f7       	brne	.-50     	; 0x2508 <LCD_voidSendString+0x14>
	{
		LCD_voidDisplayChar (copy_u8PtrString[local_u8Iterator]);
		local_u8Iterator++;
	}
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <LCD_voidSendNumber>:
* Parameters :
            => Copy_u32Number --> number that you want to display
* return : nothing
*/
void LCD_voidSendNumber            (u32 copy_u32Number)
{
    2546:	ef 92       	push	r14
    2548:	ff 92       	push	r15
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	28 97       	sbiw	r28, 0x08	; 8
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	6d 83       	std	Y+5, r22	; 0x05
    2564:	7e 83       	std	Y+6, r23	; 0x06
    2566:	8f 83       	std	Y+7, r24	; 0x07
    2568:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Reversed = 1 ;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	a0 e0       	ldi	r26, 0x00	; 0
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	ab 83       	std	Y+3, r26	; 0x03
    2578:	bc 83       	std	Y+4, r27	; 0x04

		if( copy_u32Number == 0 ){ LCD_voidDisplayChar('0'); }
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	af 81       	ldd	r26, Y+7	; 0x07
    2580:	b8 85       	ldd	r27, Y+8	; 0x08
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	a1 05       	cpc	r26, r1
    2586:	b1 05       	cpc	r27, r1
    2588:	d1 f5       	brne	.+116    	; 0x25fe <LCD_voidSendNumber+0xb8>
    258a:	80 e3       	ldi	r24, 0x30	; 48
    258c:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_voidDisplayChar>
    2590:	6b c0       	rjmp	.+214    	; 0x2668 <LCD_voidSendNumber+0x122>
		{

			while( copy_u32Number != 0 )
			{

				local_u32Reversed = ( local_u32Reversed * 10 ) + ( copy_u32Number % 10 );
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	ab 81       	ldd	r26, Y+3	; 0x03
    2598:	bc 81       	ldd	r27, Y+4	; 0x04
    259a:	2a e0       	ldi	r18, 0x0A	; 10
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__mulsi3>
    25aa:	7b 01       	movw	r14, r22
    25ac:	8c 01       	movw	r16, r24
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	af 81       	ldd	r26, Y+7	; 0x07
    25b4:	b8 85       	ldd	r27, Y+8	; 0x08
    25b6:	2a e0       	ldi	r18, 0x0A	; 10
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8e 0d       	add	r24, r14
    25cc:	9f 1d       	adc	r25, r15
    25ce:	a0 1f       	adc	r26, r16
    25d0:	b1 1f       	adc	r27, r17
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	ab 83       	std	Y+3, r26	; 0x03
    25d8:	bc 83       	std	Y+4, r27	; 0x04
				copy_u32Number /= 10 ;
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	af 81       	ldd	r26, Y+7	; 0x07
    25e0:	b8 85       	ldd	r27, Y+8	; 0x08
    25e2:	2a e0       	ldi	r18, 0x0A	; 10
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    25f2:	da 01       	movw	r26, r20
    25f4:	c9 01       	movw	r24, r18
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	af 83       	std	Y+7, r26	; 0x07
    25fc:	b8 87       	std	Y+8, r27	; 0x08
		if( copy_u32Number == 0 ){ LCD_voidDisplayChar('0'); }

		else
		{

			while( copy_u32Number != 0 )
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	af 81       	ldd	r26, Y+7	; 0x07
    2604:	b8 85       	ldd	r27, Y+8	; 0x08
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	a1 05       	cpc	r26, r1
    260a:	b1 05       	cpc	r27, r1
    260c:	11 f6       	brne	.-124    	; 0x2592 <LCD_voidSendNumber+0x4c>
    260e:	23 c0       	rjmp	.+70     	; 0x2656 <LCD_voidSendNumber+0x110>

			}
			while( local_u32Reversed != 1 )
			{

				LCD_voidDisplayChar( ( local_u32Reversed % 10 ) + 48 );
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	ab 81       	ldd	r26, Y+3	; 0x03
    2616:	bc 81       	ldd	r27, Y+4	; 0x04
    2618:	2a e0       	ldi	r18, 0x0A	; 10
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	80 5d       	subi	r24, 0xD0	; 208
    262e:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_voidDisplayChar>
				local_u32Reversed /= 10 ;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	ab 81       	ldd	r26, Y+3	; 0x03
    2638:	bc 81       	ldd	r27, Y+4	; 0x04
    263a:	2a e0       	ldi	r18, 0x0A	; 10
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    264a:	da 01       	movw	r26, r20
    264c:	c9 01       	movw	r24, r18
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	ab 83       	std	Y+3, r26	; 0x03
    2654:	bc 83       	std	Y+4, r27	; 0x04

				local_u32Reversed = ( local_u32Reversed * 10 ) + ( copy_u32Number % 10 );
				copy_u32Number /= 10 ;

			}
			while( local_u32Reversed != 1 )
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	ab 81       	ldd	r26, Y+3	; 0x03
    265c:	bc 81       	ldd	r27, Y+4	; 0x04
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	91 05       	cpc	r25, r1
    2662:	a1 05       	cpc	r26, r1
    2664:	b1 05       	cpc	r27, r1
    2666:	a1 f6       	brne	.-88     	; 0x2610 <LCD_voidSendNumber+0xca>

			}

		}

}
    2668:	28 96       	adiw	r28, 0x08	; 8
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	08 95       	ret

00002682 <LCD_voidShift>:
            => copy_u8ShifttingDirection --> Command
* return : nothing

*/
void LCD_voidShift                 (u8 copy_u8ShifttingDirection)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	e3 97       	sbiw	r28, 0x33	; 51
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	89 ab       	std	Y+49, r24	; 0x31
	switch (copy_u8ShifttingDirection)
    2698:	89 a9       	ldd	r24, Y+49	; 0x31
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	3b ab       	std	Y+51, r19	; 0x33
    26a0:	2a ab       	std	Y+50, r18	; 0x32
    26a2:	8a a9       	ldd	r24, Y+50	; 0x32
    26a4:	9b a9       	ldd	r25, Y+51	; 0x33
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	39 f0       	breq	.+14     	; 0x26b8 <LCD_voidShift+0x36>
    26aa:	2a a9       	ldd	r18, Y+50	; 0x32
    26ac:	3b a9       	ldd	r19, Y+51	; 0x33
    26ae:	21 30       	cpi	r18, 0x01	; 1
    26b0:	31 05       	cpc	r19, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <LCD_voidShift+0x34>
    26b4:	c3 c0       	rjmp	.+390    	; 0x283c <LCD_voidShift+0x1ba>
    26b6:	83 c1       	rjmp	.+774    	; 0x29be <LCD_voidShift+0x33c>
	{
	   case LCD_SHIFT_LEFT :
		   LCD_voidSendCommand(Display_shift_Left);
    26b8:	88 e1       	ldi	r24, 0x18	; 24
    26ba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a4 e3       	ldi	r26, 0x34	; 52
    26c4:	b2 e4       	ldi	r27, 0x42	; 66
    26c6:	8d a7       	std	Y+45, r24	; 0x2d
    26c8:	9e a7       	std	Y+46, r25	; 0x2e
    26ca:	af a7       	std	Y+47, r26	; 0x2f
    26cc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    26d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    26d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d4:	98 a9       	ldd	r25, Y+48	; 0x30
    26d6:	2b ea       	ldi	r18, 0xAB	; 171
    26d8:	3a ea       	ldi	r19, 0xAA	; 170
    26da:	4a ea       	ldi	r20, 0xAA	; 170
    26dc:	50 e4       	ldi	r21, 0x40	; 64
    26de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	89 a7       	std	Y+41, r24	; 0x29
    26e8:	9a a7       	std	Y+42, r25	; 0x2a
    26ea:	ab a7       	std	Y+43, r26	; 0x2b
    26ec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26ee:	69 a5       	ldd	r22, Y+41	; 0x29
    26f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    26f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	5f e3       	ldi	r21, 0x3F	; 63
    26fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2702:	88 23       	and	r24, r24
    2704:	1c f4       	brge	.+6      	; 0x270c <LCD_voidShift+0x8a>
		__ticks = 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	88 a7       	std	Y+40, r24	; 0x28
    270a:	91 c0       	rjmp	.+290    	; 0x282e <LCD_voidShift+0x1ac>
	else if (__tmp > 255)
    270c:	69 a5       	ldd	r22, Y+41	; 0x29
    270e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2710:	8b a5       	ldd	r24, Y+43	; 0x2b
    2712:	9c a5       	ldd	r25, Y+44	; 0x2c
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	53 e4       	ldi	r21, 0x43	; 67
    271c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2720:	18 16       	cp	r1, r24
    2722:	0c f0       	brlt	.+2      	; 0x2726 <LCD_voidShift+0xa4>
    2724:	7b c0       	rjmp	.+246    	; 0x281c <LCD_voidShift+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2726:	6d a5       	ldd	r22, Y+45	; 0x2d
    2728:	7e a5       	ldd	r23, Y+46	; 0x2e
    272a:	8f a5       	ldd	r24, Y+47	; 0x2f
    272c:	98 a9       	ldd	r25, Y+48	; 0x30
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a e7       	ldi	r20, 0x7A	; 122
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8c a3       	std	Y+36, r24	; 0x24
    2740:	9d a3       	std	Y+37, r25	; 0x25
    2742:	ae a3       	std	Y+38, r26	; 0x26
    2744:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6c a1       	ldd	r22, Y+36	; 0x24
    2748:	7d a1       	ldd	r23, Y+37	; 0x25
    274a:	8e a1       	ldd	r24, Y+38	; 0x26
    274c:	9f a1       	ldd	r25, Y+39	; 0x27
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e7       	ldi	r20, 0x7A	; 122
    2754:	55 e4       	ldi	r21, 0x45	; 69
    2756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	88 a3       	std	Y+32, r24	; 0x20
    2760:	99 a3       	std	Y+33, r25	; 0x21
    2762:	aa a3       	std	Y+34, r26	; 0x22
    2764:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2766:	68 a1       	ldd	r22, Y+32	; 0x20
    2768:	79 a1       	ldd	r23, Y+33	; 0x21
    276a:	8a a1       	ldd	r24, Y+34	; 0x22
    276c:	9b a1       	ldd	r25, Y+35	; 0x23
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <LCD_voidShift+0x106>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9f 8f       	std	Y+31, r25	; 0x1f
    2784:	8e 8f       	std	Y+30, r24	; 0x1e
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <LCD_voidShift+0x184>
	else if (__tmp > 65535)
    2788:	68 a1       	ldd	r22, Y+32	; 0x20
    278a:	79 a1       	ldd	r23, Y+33	; 0x21
    278c:	8a a1       	ldd	r24, Y+34	; 0x22
    278e:	9b a1       	ldd	r25, Y+35	; 0x23
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <LCD_voidShift+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6c a1       	ldd	r22, Y+36	; 0x24
    27a2:	7d a1       	ldd	r23, Y+37	; 0x25
    27a4:	8e a1       	ldd	r24, Y+38	; 0x26
    27a6:	9f a1       	ldd	r25, Y+39	; 0x27
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9f 8f       	std	Y+31, r25	; 0x1f
    27c6:	8e 8f       	std	Y+30, r24	; 0x1e
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <LCD_voidShift+0x166>
    27ca:	80 e9       	ldi	r24, 0x90	; 144
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	9d 8f       	std	Y+29, r25	; 0x1d
    27d0:	8c 8f       	std	Y+28, r24	; 0x1c
    27d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_voidShift+0x154>
    27da:	9d 8f       	std	Y+29, r25	; 0x1d
    27dc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9f 8f       	std	Y+31, r25	; 0x1f
    27e6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <LCD_voidShift+0x148>
    27f0:	e6 c0       	rjmp	.+460    	; 0x29be <LCD_voidShift+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	68 a1       	ldd	r22, Y+32	; 0x20
    27f4:	79 a1       	ldd	r23, Y+33	; 0x21
    27f6:	8a a1       	ldd	r24, Y+34	; 0x22
    27f8:	9b a1       	ldd	r25, Y+35	; 0x23
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9f 8f       	std	Y+31, r25	; 0x1f
    2804:	8e 8f       	std	Y+30, r24	; 0x1e
    2806:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2808:	9f 8d       	ldd	r25, Y+31	; 0x1f
    280a:	9b 8f       	std	Y+27, r25	; 0x1b
    280c:	8a 8f       	std	Y+26, r24	; 0x1a
    280e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2810:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <LCD_voidShift+0x190>
    2816:	9b 8f       	std	Y+27, r25	; 0x1b
    2818:	8a 8f       	std	Y+26, r24	; 0x1a
    281a:	d1 c0       	rjmp	.+418    	; 0x29be <LCD_voidShift+0x33c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    281c:	69 a5       	ldd	r22, Y+41	; 0x29
    281e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2820:	8b a5       	ldd	r24, Y+43	; 0x2b
    2822:	9c a5       	ldd	r25, Y+44	; 0x2c
    2824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	88 a7       	std	Y+40, r24	; 0x28
    282e:	88 a5       	ldd	r24, Y+40	; 0x28
    2830:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2832:	89 8d       	ldd	r24, Y+25	; 0x19
    2834:	8a 95       	dec	r24
    2836:	f1 f7       	brne	.-4      	; 0x2834 <LCD_voidShift+0x1b2>
    2838:	89 8f       	std	Y+25, r24	; 0x19
    283a:	c1 c0       	rjmp	.+386    	; 0x29be <LCD_voidShift+0x33c>
		   _delay_us(45);
		   break;
	   case LCD_SHIFT_RIGHT :
		   LCD_voidSendCommand(Display_shift_Right );
    283c:	8c e1       	ldi	r24, 0x1C	; 28
    283e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a4 e3       	ldi	r26, 0x34	; 52
    2848:	b2 e4       	ldi	r27, 0x42	; 66
    284a:	8d 8b       	std	Y+21, r24	; 0x15
    284c:	9e 8b       	std	Y+22, r25	; 0x16
    284e:	af 8b       	std	Y+23, r26	; 0x17
    2850:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2852:	6d 89       	ldd	r22, Y+21	; 0x15
    2854:	7e 89       	ldd	r23, Y+22	; 0x16
    2856:	8f 89       	ldd	r24, Y+23	; 0x17
    2858:	98 8d       	ldd	r25, Y+24	; 0x18
    285a:	2b ea       	ldi	r18, 0xAB	; 171
    285c:	3a ea       	ldi	r19, 0xAA	; 170
    285e:	4a ea       	ldi	r20, 0xAA	; 170
    2860:	50 e4       	ldi	r21, 0x40	; 64
    2862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	89 8b       	std	Y+17, r24	; 0x11
    286c:	9a 8b       	std	Y+18, r25	; 0x12
    286e:	ab 8b       	std	Y+19, r26	; 0x13
    2870:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2872:	69 89       	ldd	r22, Y+17	; 0x11
    2874:	7a 89       	ldd	r23, Y+18	; 0x12
    2876:	8b 89       	ldd	r24, Y+19	; 0x13
    2878:	9c 89       	ldd	r25, Y+20	; 0x14
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e8       	ldi	r20, 0x80	; 128
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2886:	88 23       	and	r24, r24
    2888:	1c f4       	brge	.+6      	; 0x2890 <LCD_voidShift+0x20e>
		__ticks = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	88 8b       	std	Y+16, r24	; 0x10
    288e:	91 c0       	rjmp	.+290    	; 0x29b2 <LCD_voidShift+0x330>
	else if (__tmp > 255)
    2890:	69 89       	ldd	r22, Y+17	; 0x11
    2892:	7a 89       	ldd	r23, Y+18	; 0x12
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	9c 89       	ldd	r25, Y+20	; 0x14
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	53 e4       	ldi	r21, 0x43	; 67
    28a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	0c f0       	brlt	.+2      	; 0x28aa <LCD_voidShift+0x228>
    28a8:	7b c0       	rjmp	.+246    	; 0x29a0 <LCD_voidShift+0x31e>
	{
		_delay_ms(__us / 1000.0);
    28aa:	6d 89       	ldd	r22, Y+21	; 0x15
    28ac:	7e 89       	ldd	r23, Y+22	; 0x16
    28ae:	8f 89       	ldd	r24, Y+23	; 0x17
    28b0:	98 8d       	ldd	r25, Y+24	; 0x18
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a e7       	ldi	r20, 0x7A	; 122
    28b8:	54 e4       	ldi	r21, 0x44	; 68
    28ba:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8c 87       	std	Y+12, r24	; 0x0c
    28c4:	9d 87       	std	Y+13, r25	; 0x0d
    28c6:	ae 87       	std	Y+14, r26	; 0x0e
    28c8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    28cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    28ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    28d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	4a e7       	ldi	r20, 0x7A	; 122
    28d8:	55 e4       	ldi	r21, 0x45	; 69
    28da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	88 87       	std	Y+8, r24	; 0x08
    28e4:	99 87       	std	Y+9, r25	; 0x09
    28e6:	aa 87       	std	Y+10, r26	; 0x0a
    28e8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28ea:	68 85       	ldd	r22, Y+8	; 0x08
    28ec:	79 85       	ldd	r23, Y+9	; 0x09
    28ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e8       	ldi	r20, 0x80	; 128
    28f8:	5f e3       	ldi	r21, 0x3F	; 63
    28fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28fe:	88 23       	and	r24, r24
    2900:	2c f4       	brge	.+10     	; 0x290c <LCD_voidShift+0x28a>
		__ticks = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9f 83       	std	Y+7, r25	; 0x07
    2908:	8e 83       	std	Y+6, r24	; 0x06
    290a:	3f c0       	rjmp	.+126    	; 0x298a <LCD_voidShift+0x308>
	else if (__tmp > 65535)
    290c:	68 85       	ldd	r22, Y+8	; 0x08
    290e:	79 85       	ldd	r23, Y+9	; 0x09
    2910:	8a 85       	ldd	r24, Y+10	; 0x0a
    2912:	9b 85       	ldd	r25, Y+11	; 0x0b
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	3f ef       	ldi	r19, 0xFF	; 255
    2918:	4f e7       	ldi	r20, 0x7F	; 127
    291a:	57 e4       	ldi	r21, 0x47	; 71
    291c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2920:	18 16       	cp	r1, r24
    2922:	4c f5       	brge	.+82     	; 0x2976 <LCD_voidShift+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2924:	6c 85       	ldd	r22, Y+12	; 0x0c
    2926:	7d 85       	ldd	r23, Y+13	; 0x0d
    2928:	8e 85       	ldd	r24, Y+14	; 0x0e
    292a:	9f 85       	ldd	r25, Y+15	; 0x0f
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e2       	ldi	r20, 0x20	; 32
    2932:	51 e4       	ldi	r21, 0x41	; 65
    2934:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9f 83       	std	Y+7, r25	; 0x07
    294a:	8e 83       	std	Y+6, r24	; 0x06
    294c:	0f c0       	rjmp	.+30     	; 0x296c <LCD_voidShift+0x2ea>
    294e:	80 e9       	ldi	r24, 0x90	; 144
    2950:	91 e0       	ldi	r25, 0x01	; 1
    2952:	9d 83       	std	Y+5, r25	; 0x05
    2954:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2956:	8c 81       	ldd	r24, Y+4	; 0x04
    2958:	9d 81       	ldd	r25, Y+5	; 0x05
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_voidShift+0x2d8>
    295e:	9d 83       	std	Y+5, r25	; 0x05
    2960:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2962:	8e 81       	ldd	r24, Y+6	; 0x06
    2964:	9f 81       	ldd	r25, Y+7	; 0x07
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	9f 83       	std	Y+7, r25	; 0x07
    296a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	9f 81       	ldd	r25, Y+7	; 0x07
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	69 f7       	brne	.-38     	; 0x294e <LCD_voidShift+0x2cc>
    2974:	24 c0       	rjmp	.+72     	; 0x29be <LCD_voidShift+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2976:	68 85       	ldd	r22, Y+8	; 0x08
    2978:	79 85       	ldd	r23, Y+9	; 0x09
    297a:	8a 85       	ldd	r24, Y+10	; 0x0a
    297c:	9b 85       	ldd	r25, Y+11	; 0x0b
    297e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9f 83       	std	Y+7, r25	; 0x07
    2988:	8e 83       	std	Y+6, r24	; 0x06
    298a:	8e 81       	ldd	r24, Y+6	; 0x06
    298c:	9f 81       	ldd	r25, Y+7	; 0x07
    298e:	9b 83       	std	Y+3, r25	; 0x03
    2990:	8a 83       	std	Y+2, r24	; 0x02
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	9b 81       	ldd	r25, Y+3	; 0x03
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_voidShift+0x314>
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	0f c0       	rjmp	.+30     	; 0x29be <LCD_voidShift+0x33c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29a0:	69 89       	ldd	r22, Y+17	; 0x11
    29a2:	7a 89       	ldd	r23, Y+18	; 0x12
    29a4:	8b 89       	ldd	r24, Y+19	; 0x13
    29a6:	9c 89       	ldd	r25, Y+20	; 0x14
    29a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	88 8b       	std	Y+16, r24	; 0x10
    29b2:	88 89       	ldd	r24, Y+16	; 0x10
    29b4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	8a 95       	dec	r24
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_voidShift+0x336>
    29bc:	89 83       	std	Y+1, r24	; 0x01

	}



}
    29be:	e3 96       	adiw	r28, 0x33	; 51
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <PRV_voidWriteHalfPort>:
            => copu_u8Val --> Command / number
* return : nothing

*/
static void PRV_voidWriteHalfPort  (u8 copu_u8Val)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	0f 92       	push	r0
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	89 83       	std	Y+1, r24	; 0x01
	if(0==GET_BIT(copu_u8Val,0))
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	88 2f       	mov	r24, r24
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	81 70       	andi	r24, 0x01	; 1
    29e4:	90 70       	andi	r25, 0x00	; 0
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	31 f4       	brne	.+12     	; 0x29f6 <PRV_voidWriteHalfPort+0x26>
	{
		DIO_enumSetPinValue (LCD_D4_PORT ,LCD_D4_PIN, DIO_PIN_LOW);
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	64 e0       	ldi	r22, 0x04	; 4
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <PRV_voidWriteHalfPort+0x30>
	}
	else
	{
		DIO_enumSetPinValue (LCD_D4_PORT ,LCD_D4_PIN, DIO_PIN_HIGH);
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	64 e0       	ldi	r22, 0x04	; 4
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	}
	if(0==GET_BIT(copu_u8Val,1))
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	86 95       	lsr	r24
    2a04:	88 2f       	mov	r24, r24
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	81 70       	andi	r24, 0x01	; 1
    2a0a:	90 70       	andi	r25, 0x00	; 0
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	31 f4       	brne	.+12     	; 0x2a1c <PRV_voidWriteHalfPort+0x4c>
	{
		DIO_enumSetPinValue (LCD_D5_PORT ,LCD_D5_PIN,DIO_PIN_LOW);
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	65 e0       	ldi	r22, 0x05	; 5
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <PRV_voidWriteHalfPort+0x56>
	}
	else
	{
		DIO_enumSetPinValue (LCD_D5_PORT ,LCD_D5_PIN,DIO_PIN_HIGH);
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	65 e0       	ldi	r22, 0x05	; 5
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	}
	if(0==GET_BIT(copu_u8Val,2))
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	86 95       	lsr	r24
    2a2a:	86 95       	lsr	r24
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	81 70       	andi	r24, 0x01	; 1
    2a32:	90 70       	andi	r25, 0x00	; 0
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	31 f4       	brne	.+12     	; 0x2a44 <PRV_voidWriteHalfPort+0x74>
	{
		DIO_enumSetPinValue (LCD_D6_PORT ,LCD_D6_PIN,DIO_PIN_LOW);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	66 e0       	ldi	r22, 0x06	; 6
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <PRV_voidWriteHalfPort+0x7e>
	}
	else
	{
		DIO_enumSetPinValue (LCD_D6_PORT ,LCD_D6_PIN,DIO_PIN_HIGH);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	66 e0       	ldi	r22, 0x06	; 6
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	}
	if(0==GET_BIT(copu_u8Val,3))
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	86 95       	lsr	r24
    2a52:	86 95       	lsr	r24
    2a54:	86 95       	lsr	r24
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	81 70       	andi	r24, 0x01	; 1
    2a5c:	90 70       	andi	r25, 0x00	; 0
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	31 f4       	brne	.+12     	; 0x2a6e <PRV_voidWriteHalfPort+0x9e>
	{
		DIO_enumSetPinValue (LCD_D7_PORT ,LCD_D7_PIN,DIO_PIN_LOW);
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	67 e0       	ldi	r22, 0x07	; 7
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <PRV_voidWriteHalfPort+0xa8>
	}
	else
	{
		DIO_enumSetPinValue (LCD_D7_PORT ,LCD_D7_PIN,DIO_PIN_HIGH);
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
	    DIO_voidSetPinValue (LCD_D4_PORT ,LCD_D4_PIN,GET_BIT(copu_u8Val,0));
	    DIO_voidSetPinValue (LCD_D5_PORT ,LCD_D5_PIN,GET_BIT(copu_u8Val,1));
	    DIO_voidSetPinValue (LCD_D6_PORT ,LCD_D6_PIN,GET_BIT(copu_u8Val,2));
	    DIO_voidSetPinValue (LCD_D7_PORT ,LCD_D7_PIN,GET_BIT(copu_u8Val,3));
	*/
}
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <LCD_voidGoToSpecificPosition>:

void LCD_voidGoToSpecificPosition  (u8 copy_u8LineNumber, u8 copy_u8Position)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	61 97       	sbiw	r28, 0x11	; 17
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	88 8b       	std	Y+16, r24	; 0x10
    2a96:	69 8b       	std	Y+17, r22	; 0x11
	u8 Loc_u8Data;
		if(copy_u8LineNumber>2||copy_u8LineNumber<1||copy_u8Position>16||copy_u8Position<1)
    2a98:	88 89       	ldd	r24, Y+16	; 0x10
    2a9a:	83 30       	cpi	r24, 0x03	; 3
    2a9c:	48 f4       	brcc	.+18     	; 0x2ab0 <LCD_voidGoToSpecificPosition+0x30>
    2a9e:	88 89       	ldd	r24, Y+16	; 0x10
    2aa0:	88 23       	and	r24, r24
    2aa2:	31 f0       	breq	.+12     	; 0x2ab0 <LCD_voidGoToSpecificPosition+0x30>
    2aa4:	89 89       	ldd	r24, Y+17	; 0x11
    2aa6:	81 31       	cpi	r24, 0x11	; 17
    2aa8:	18 f4       	brcc	.+6      	; 0x2ab0 <LCD_voidGoToSpecificPosition+0x30>
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	88 23       	and	r24, r24
    2aae:	19 f4       	brne	.+6      	; 0x2ab6 <LCD_voidGoToSpecificPosition+0x36>
		{
			Loc_u8Data=(DDRAM_CONST );  //0x80
    2ab0:	80 e8       	ldi	r24, 0x80	; 128
    2ab2:	8f 87       	std	Y+15, r24	; 0x0f
    2ab4:	0d c0       	rjmp	.+26     	; 0x2ad0 <LCD_voidGoToSpecificPosition+0x50>
		}
		else if(copy_u8LineNumber==LCD_ROW_1)
    2ab6:	88 89       	ldd	r24, Y+16	; 0x10
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	21 f4       	brne	.+8      	; 0x2ac4 <LCD_voidGoToSpecificPosition+0x44>
		{
			Loc_u8Data=(DDRAM_CONST+(copy_u8Position-1));
    2abc:	89 89       	ldd	r24, Y+17	; 0x11
    2abe:	81 58       	subi	r24, 0x81	; 129
    2ac0:	8f 87       	std	Y+15, r24	; 0x0f
    2ac2:	06 c0       	rjmp	.+12     	; 0x2ad0 <LCD_voidGoToSpecificPosition+0x50>
		}
		else if(copy_u8LineNumber==LCD_ROW_2)
    2ac4:	88 89       	ldd	r24, Y+16	; 0x10
    2ac6:	82 30       	cpi	r24, 0x02	; 2
    2ac8:	19 f4       	brne	.+6      	; 0x2ad0 <LCD_voidGoToSpecificPosition+0x50>
		{
			Loc_u8Data=(DDRAM_CONST+(64)+(copy_u8Position-1));  // 64 is dec of 0x40 the address of line2
    2aca:	89 89       	ldd	r24, Y+17	; 0x11
    2acc:	81 54       	subi	r24, 0x41	; 65
    2ace:	8f 87       	std	Y+15, r24	; 0x0f
		}
		LCD_voidSendCommand(Loc_u8Data);
    2ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_voidSendCommand>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 e8       	ldi	r26, 0x80	; 128
    2adc:	bf e3       	ldi	r27, 0x3F	; 63
    2ade:	8b 87       	std	Y+11, r24	; 0x0b
    2ae0:	9c 87       	std	Y+12, r25	; 0x0c
    2ae2:	ad 87       	std	Y+13, r26	; 0x0d
    2ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a e7       	ldi	r20, 0x7A	; 122
    2af4:	55 e4       	ldi	r21, 0x45	; 69
    2af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8f 83       	std	Y+7, r24	; 0x07
    2b00:	98 87       	std	Y+8, r25	; 0x08
    2b02:	a9 87       	std	Y+9, r26	; 0x09
    2b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b06:	6f 81       	ldd	r22, Y+7	; 0x07
    2b08:	78 85       	ldd	r23, Y+8	; 0x08
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e8       	ldi	r20, 0x80	; 128
    2b14:	5f e3       	ldi	r21, 0x3F	; 63
    2b16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	2c f4       	brge	.+10     	; 0x2b28 <LCD_voidGoToSpecificPosition+0xa8>
		__ticks = 1;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	3f c0       	rjmp	.+126    	; 0x2ba6 <LCD_voidGoToSpecificPosition+0x126>
	else if (__tmp > 65535)
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	3f ef       	ldi	r19, 0xFF	; 255
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	57 e4       	ldi	r21, 0x47	; 71
    2b38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	4c f5       	brge	.+82     	; 0x2b92 <LCD_voidGoToSpecificPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e2       	ldi	r20, 0x20	; 32
    2b4e:	51 e4       	ldi	r21, 0x41	; 65
    2b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	0f c0       	rjmp	.+30     	; 0x2b88 <LCD_voidGoToSpecificPosition+0x108>
    2b6a:	80 e9       	ldi	r24, 0x90	; 144
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	9c 83       	std	Y+4, r25	; 0x04
    2b70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_voidGoToSpecificPosition+0xf6>
    2b7a:	9c 83       	std	Y+4, r25	; 0x04
    2b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	9e 81       	ldd	r25, Y+6	; 0x06
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	69 f7       	brne	.-38     	; 0x2b6a <LCD_voidGoToSpecificPosition+0xea>
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <LCD_voidGoToSpecificPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_voidGoToSpecificPosition+0x132>
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    2bba:	61 96       	adiw	r28, 0x11	; 17
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <PRV_voidEnableTriggerWrite>:
*
* Hint : static Function to forbid calling it out this file
*
*/
static void PRV_voidEnableTriggerWrite    (void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	6c 97       	sbiw	r28, 0x1c	; 28
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue (LCD_EN_PORT ,LCD_EN_PIN,DIO_PIN_HIGH);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	63 e0       	ldi	r22, 0x03	; 3
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e8       	ldi	r26, 0x80	; 128
    2bf0:	bf e3       	ldi	r27, 0x3F	; 63
    2bf2:	89 8f       	std	Y+25, r24	; 0x19
    2bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    2bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    2bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a e7       	ldi	r20, 0x7A	; 122
    2c08:	55 e4       	ldi	r21, 0x45	; 69
    2c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8d 8b       	std	Y+21, r24	; 0x15
    2c14:	9e 8b       	std	Y+22, r25	; 0x16
    2c16:	af 8b       	std	Y+23, r26	; 0x17
    2c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9c 8b       	std	Y+20, r25	; 0x14
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    2c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c40:	8f 89       	ldd	r24, Y+23	; 0x17
    2c42:	98 8d       	ldd	r25, Y+24	; 0x18
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	69 8d       	ldd	r22, Y+25	; 0x19
    2c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9c 8b       	std	Y+20, r25	; 0x14
    2c7a:	8b 8b       	std	Y+19, r24	; 0x13
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <PRV_voidEnableTriggerWrite+0xd0>
    2c7e:	80 e9       	ldi	r24, 0x90	; 144
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	9a 8b       	std	Y+18, r25	; 0x12
    2c84:	89 8b       	std	Y+17, r24	; 0x11
    2c86:	89 89       	ldd	r24, Y+17	; 0x11
    2c88:	9a 89       	ldd	r25, Y+18	; 0x12
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <PRV_voidEnableTriggerWrite+0xbe>
    2c8e:	9a 8b       	std	Y+18, r25	; 0x12
    2c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8b 89       	ldd	r24, Y+19	; 0x13
    2c94:	9c 89       	ldd	r25, Y+20	; 0x14
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <PRV_voidEnableTriggerWrite+0xb2>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    2caa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cac:	98 8d       	ldd	r25, Y+24	; 0x18
    2cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9c 8b       	std	Y+20, r25	; 0x14
    2cb8:	8b 8b       	std	Y+19, r24	; 0x13
    2cba:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbe:	98 8b       	std	Y+16, r25	; 0x10
    2cc0:	8f 87       	std	Y+15, r24	; 0x0f
    2cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc4:	98 89       	ldd	r25, Y+16	; 0x10
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <PRV_voidEnableTriggerWrite+0xfa>
    2cca:	98 8b       	std	Y+16, r25	; 0x10
    2ccc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue (LCD_EN_PORT ,LCD_EN_PIN,DIO_PIN_LOW);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	63 e0       	ldi	r22, 0x03	; 3
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_enumSetPinValue>
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a0 e8       	ldi	r26, 0x80	; 128
    2cde:	bf e3       	ldi	r27, 0x3F	; 63
    2ce0:	8b 87       	std	Y+11, r24	; 0x0b
    2ce2:	9c 87       	std	Y+12, r25	; 0x0c
    2ce4:	ad 87       	std	Y+13, r26	; 0x0d
    2ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	4a e7       	ldi	r20, 0x7A	; 122
    2cf6:	55 e4       	ldi	r21, 0x45	; 69
    2cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	8f 83       	std	Y+7, r24	; 0x07
    2d02:	98 87       	std	Y+8, r25	; 0x08
    2d04:	a9 87       	std	Y+9, r26	; 0x09
    2d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e8       	ldi	r20, 0x80	; 128
    2d16:	5f e3       	ldi	r21, 0x3F	; 63
    2d18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d1c:	88 23       	and	r24, r24
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <PRV_voidEnableTriggerWrite+0x15e>
		__ticks = 1;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	3f c0       	rjmp	.+126    	; 0x2da8 <PRV_voidEnableTriggerWrite+0x1dc>
	else if (__tmp > 65535)
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	3f ef       	ldi	r19, 0xFF	; 255
    2d36:	4f e7       	ldi	r20, 0x7F	; 127
    2d38:	57 e4       	ldi	r21, 0x47	; 71
    2d3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d3e:	18 16       	cp	r1, r24
    2d40:	4c f5       	brge	.+82     	; 0x2d94 <PRV_voidEnableTriggerWrite+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e2       	ldi	r20, 0x20	; 32
    2d50:	51 e4       	ldi	r21, 0x41	; 65
    2d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9e 83       	std	Y+6, r25	; 0x06
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	0f c0       	rjmp	.+30     	; 0x2d8a <PRV_voidEnableTriggerWrite+0x1be>
    2d6c:	80 e9       	ldi	r24, 0x90	; 144
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <PRV_voidEnableTriggerWrite+0x1ac>
    2d7c:	9c 83       	std	Y+4, r25	; 0x04
    2d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <PRV_voidEnableTriggerWrite+0x1a0>
    2d92:	14 c0       	rjmp	.+40     	; 0x2dbc <PRV_voidEnableTriggerWrite+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <PRV_voidEnableTriggerWrite+0x1e8>
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2dbc:	6c 96       	adiw	r28, 0x1c	; 28
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <LM35_voidInit>:
* Parameters :
            => copy_u8ReferenceVoltage {AVCC , AREF ,INTERNAL}
* return : Nothing
*/
void LM35_voidInit(LM35_sensorChannel_t copy_tChannelId)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(DIO_PORTA, copy_tChannelId, DIO_PIN_INPUT);
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	69 81       	ldd	r22, Y+1	; 0x01
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_enumSetPinDirection>

	ADC_voidInit(INTERNAL_2_56);
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_voidInit>
}
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <LM35_voidGetTemperature>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
			=> Pointer to TEMP Variable which will return in it
* return : Nothing
*/
void LM35_voidGetTemperature(LM35_sensorChannel_t copy_tChannelId, u8* copy_u8Temperature)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	27 97       	sbiw	r28, 0x07	; 7
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	7f 83       	std	Y+7, r23	; 0x07
    2e0a:	6e 83       	std	Y+6, r22	; 0x06
	if(copy_u8Temperature != NULL)
    2e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	61 f1       	breq	.+88     	; 0x2e6c <LM35_voidGetTemperature+0x7a>
	{
		u16 local_u16DigitalVal, local_u16AnalogVal;
		ADC_voidGetDigitalValue(copy_tChannelId, &local_u16DigitalVal);
    2e14:	9e 01       	movw	r18, r28
    2e16:	2d 5f       	subi	r18, 0xFD	; 253
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	b9 01       	movw	r22, r18
    2e1e:	0e 94 c4 06 	call	0xd88	; 0xd88 <ADC_voidGetDigitalValue>

		local_u16AnalogVal = (local_u16DigitalVal * 2560UL) / 1024;
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	cc 01       	movw	r24, r24
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3a e0       	ldi	r19, 0x0A	; 10
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__mulsi3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	07 2e       	mov	r0, r23
    2e42:	7a e0       	ldi	r23, 0x0A	; 10
    2e44:	b6 95       	lsr	r27
    2e46:	a7 95       	ror	r26
    2e48:	97 95       	ror	r25
    2e4a:	87 95       	ror	r24
    2e4c:	7a 95       	dec	r23
    2e4e:	d1 f7       	brne	.-12     	; 0x2e44 <LM35_voidGetTemperature+0x52>
    2e50:	70 2d       	mov	r23, r0
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	89 83       	std	Y+1, r24	; 0x01
		*copy_u8Temperature = local_u16AnalogVal / 10;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	2a e0       	ldi	r18, 0x0A	; 10
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	b9 01       	movw	r22, r18
    2e60:	0e 94 19 19 	call	0x3232	; 0x3232 <__udivmodhi4>
    2e64:	cb 01       	movw	r24, r22
    2e66:	ee 81       	ldd	r30, Y+6	; 0x06
    2e68:	ff 81       	ldd	r31, Y+7	; 0x07
    2e6a:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    2e6c:	27 96       	adiw	r28, 0x07	; 7
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <PWM0_voidInit>:
#include "PWM0_interface.h"
#include "PWM0_register.h"
#include "PWM0_config.h"

void PWM0_voidInit(void)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
	/*Initialize Waveform Generation Mode as fast PWM Mode*/
#if    PWM0_MODE==TIMER0_FAST_PWM_MODE
		SET_BIT(TCCR0_REG , WGM00) ;
    2e86:	a3 e5       	ldi	r26, 0x53	; 83
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e3 e5       	ldi	r30, 0x53	; 83
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 64       	ori	r24, 0x40	; 64
    2e92:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG , WGM01) ;
    2e94:	a3 e5       	ldi	r26, 0x53	; 83
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e3 e5       	ldi	r30, 0x53	; 83
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 60       	ori	r24, 0x08	; 8
    2ea0:	8c 93       	st	X, r24
		/*Select non inverting pwm*/
      #if    FAST_PWM0_OUTPUT_MODE==PWM0_NON_INVERTING
		      CLR_BIT(TCCR0_REG,COM00);
    2ea2:	a3 e5       	ldi	r26, 0x53	; 83
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e3 e5       	ldi	r30, 0x53	; 83
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	8f 7e       	andi	r24, 0xEF	; 239
    2eae:	8c 93       	st	X, r24
		      SET_BIT(TCCR0_REG,COM01);
    2eb0:	a3 e5       	ldi	r26, 0x53	; 83
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e3 e5       	ldi	r30, 0x53	; 83
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	80 62       	ori	r24, 0x20	; 32
    2ebc:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"
#endif



}
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <PWM0_voidGeneratePWM>:
void PWM0_voidGeneratePWM (u8 copu_u8DutyCycle)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	0f 92       	push	r0
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	89 83       	std	Y+1, r24	; 0x01
   if (copu_u8DutyCycle <= 100)
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	85 36       	cpi	r24, 0x65	; 101
    2ed4:	78 f4       	brcc	.+30     	; 0x2ef4 <PWM0_voidGeneratePWM+0x30>
	{
          #if    PWM0_OUTPUT_MODE == PWM0_NON_INVERTING
	                OCR0_REG = ((copu_u8DutyCycle * 256) / 100) - 1;
    2ed6:	ec e5       	ldi	r30, 0x5C	; 92
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	88 2f       	mov	r24, r24
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	98 2f       	mov	r25, r24
    2ee2:	88 27       	eor	r24, r24
    2ee4:	24 e6       	ldi	r18, 0x64	; 100
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	b9 01       	movw	r22, r18
    2eea:	0e 94 2d 19 	call	0x325a	; 0x325a <__divmodhi4>
    2eee:	cb 01       	movw	r24, r22
    2ef0:	81 50       	subi	r24, 0x01	; 1
    2ef2:	80 83       	st	Z, r24
            CLR_BIT(TCCR0_REG, CS00);
   	        SET_BIT(TCCR0_REG, CS01);
   	        CLR_BIT(TCCR0_REG, CS02);
	/* Select prescaler value as 64 */
   #elif    PWM0_PRESCALLER==TIMER0_64_PRE
	         SET_BIT(TCCR0_REG, CS00);
    2ef4:	a3 e5       	ldi	r26, 0x53	; 83
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e3 e5       	ldi	r30, 0x53	; 83
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	81 60       	ori	r24, 0x01	; 1
    2f00:	8c 93       	st	X, r24
	         SET_BIT(TCCR0_REG, CS01);
    2f02:	a3 e5       	ldi	r26, 0x53	; 83
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e3 e5       	ldi	r30, 0x53	; 83
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	82 60       	ori	r24, 0x02	; 2
    2f0e:	8c 93       	st	X, r24
	         CLR_BIT(TCCR0_REG, CS02);
    2f10:	a3 e5       	ldi	r26, 0x53	; 83
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e3 e5       	ldi	r30, 0x53	; 83
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	8b 7f       	andi	r24, 0xFB	; 251
    2f1c:	8c 93       	st	X, r24
	         SET_BIT(TCCR0_REG, CS02);
   #else
            #error "Wrong TIMER0_PRESCALLER Config"
   #endif

}
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <PWM0_voidStop>:
void PWM0_voidStop (void)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
	/*TIMER0_NO_CLOCK*/
	CLR_BIT(TCCR0_REG,CS00);
    2f2e:	a3 e5       	ldi	r26, 0x53	; 83
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e3 e5       	ldi	r30, 0x53	; 83
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	8e 7f       	andi	r24, 0xFE	; 254
    2f3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
    2f3c:	a3 e5       	ldi	r26, 0x53	; 83
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e3 e5       	ldi	r30, 0x53	; 83
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	8d 7f       	andi	r24, 0xFD	; 253
    2f48:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02);
    2f4a:	a3 e5       	ldi	r26, 0x53	; 83
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	e3 e5       	ldi	r30, 0x53	; 83
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	8b 7f       	andi	r24, 0xFB	; 251
    2f56:	8c 93       	st	X, r24
}
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <PWM2_voidInit>:
#include "PWM2_interface.h"
#include "PWM2_register.h"
#include "PWM2_config.h"

void PWM2_voidInit(void)
{
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
	/*Initialize Waveform Generation Mode as fast PWM Mode*/
#if        TIMER2_MODE == TIMER2_FAST_PWM_MODE
	           SET_BIT(TCCR2_REG , WGM21) ;
    2f66:	a5 e4       	ldi	r26, 0x45	; 69
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e5 e4       	ldi	r30, 0x45	; 69
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 60       	ori	r24, 0x08	; 8
    2f72:	8c 93       	st	X, r24
		       SET_BIT(TCCR2_REG , WGM20) ;
    2f74:	a5 e4       	ldi	r26, 0x45	; 69
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e5 e4       	ldi	r30, 0x45	; 69
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	80 64       	ori	r24, 0x40	; 64
    2f80:	8c 93       	st	X, r24
#else
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"
#endif
     /*Select non inverting pwm*/
#if    PWM0_OUTPUT_MODE == PWM2_NON_INVERTING
		       SET_BIT (TCCR2_REG,COM21);
    2f82:	a5 e4       	ldi	r26, 0x45	; 69
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e5 e4       	ldi	r30, 0x45	; 69
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 62       	ori	r24, 0x20	; 32
    2f8e:	8c 93       	st	X, r24
		       CLR_BIT (TCCR2_REG,COM20);
    2f90:	a5 e4       	ldi	r26, 0x45	; 69
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e5 e4       	ldi	r30, 0x45	; 69
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	8f 7e       	andi	r24, 0xEF	; 239
    2f9c:	8c 93       	st	X, r24
#endif




}
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <PWM2_voidGeneratePWM>:
void PWM2_voidGeneratePWM (u8 copu_u8DutyCycle)
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	0f 92       	push	r0
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	89 83       	std	Y+1, r24	; 0x01
	if (copu_u8DutyCycle <= 100)
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	85 36       	cpi	r24, 0x65	; 101
    2fb4:	78 f4       	brcc	.+30     	; 0x2fd4 <PWM2_voidGeneratePWM+0x30>
	{
	    #if    PWM0_OUTPUT_MODE == PWM0_NON_INVERTING
		        OCR2_REG = ((copu_u8DutyCycle * 256) / 100) - 1;
    2fb6:	e3 e4       	ldi	r30, 0x43	; 67
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	98 2f       	mov	r25, r24
    2fc2:	88 27       	eor	r24, r24
    2fc4:	24 e6       	ldi	r18, 0x64	; 100
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	b9 01       	movw	r22, r18
    2fca:	0e 94 2d 19 	call	0x325a	; 0x325a <__divmodhi4>
    2fce:	cb 01       	movw	r24, r22
    2fd0:	81 50       	subi	r24, 0x01	; 1
    2fd2:	80 83       	st	Z, r24
#elif    TIMER2_PRESCALLER==TIMER2_32_PRE
	      CLR_BIT (TCCR2_REG,CS22);
	      SET_BIT (TCCR2_REG,CS21);
	      SET_BIT (TCCR2_REG,CS20);
#elif    TIMER2_PRESCALLER==TIMER2_64_PRE
	      SET_BIT (TCCR2_REG,CS22);
    2fd4:	a5 e4       	ldi	r26, 0x45	; 69
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e5 e4       	ldi	r30, 0x45	; 69
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	84 60       	ori	r24, 0x04	; 4
    2fe0:	8c 93       	st	X, r24
	      CLR_BIT (TCCR2_REG,CS21);
    2fe2:	a5 e4       	ldi	r26, 0x45	; 69
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e5 e4       	ldi	r30, 0x45	; 69
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	8d 7f       	andi	r24, 0xFD	; 253
    2fee:	8c 93       	st	X, r24
	      CLR_BIT (TCCR2_REG,CS20);
    2ff0:	a5 e4       	ldi	r26, 0x45	; 69
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e5 e4       	ldi	r30, 0x45	; 69
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8e 7f       	andi	r24, 0xFE	; 254
    2ffc:	8c 93       	st	X, r24
	      SET_BIT (TCCR2_REG,CS21);
	      SET_BIT (TCCR2_REG,CS20);
#else
          #error "Wrong TIMER2_PRESCALLER Config"
#endif
}
    2ffe:	0f 90       	pop	r0
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <PWM2_voidStop>:
void PWM2_voidStop (void)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
	/*TIMER2_NO_CLOCK*/
	CLR_BIT (TCCR2_REG,CS22);
    300e:	a5 e4       	ldi	r26, 0x45	; 69
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e5 e4       	ldi	r30, 0x45	; 69
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	8b 7f       	andi	r24, 0xFB	; 251
    301a:	8c 93       	st	X, r24
	CLR_BIT (TCCR2_REG,CS21);
    301c:	a5 e4       	ldi	r26, 0x45	; 69
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e5 e4       	ldi	r30, 0x45	; 69
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	8d 7f       	andi	r24, 0xFD	; 253
    3028:	8c 93       	st	X, r24
    CLR_BIT (TCCR2_REG,CS20);
    302a:	a5 e4       	ldi	r26, 0x45	; 69
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e5 e4       	ldi	r30, 0x45	; 69
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	8e 7f       	andi	r24, 0xFE	; 254
    3036:	8c 93       	st	X, r24
}
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <main>:
#include "LCD_interface.h"
#include "LM35_interface.h"
#include "DCM_interface.h"

int main ()
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	2f 97       	sbiw	r28, 0x0f	; 15
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8TempValue;

    // Initialize the LCD, LM35 sensor, and PWM
    LCD_voidInit();
    3052:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <LCD_voidInit>
    LM35_voidInit(LM35_ADC_CHANNEL_0);
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LM35_voidInit>
    DCM_voidInit  (DCM_WITH_CTRL_SREED,DCM_A);
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	0e 94 0a 07 	call	0xe14	; 0xe14 <DCM_voidInit>

    while(1)
    {
        // Get the temperature value from the LM35 sensor
        LM35_voidGetTemperature(LM35_ADC_CHANNEL_0, &local_u8TempValue);
    3064:	9e 01       	movw	r18, r28
    3066:	21 5f       	subi	r18, 0xF1	; 241
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	b9 01       	movw	r22, r18
    306e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LM35_voidGetTemperature>

        // Display the temperature value on the LCD
        LCD_voidSendString((u8*)"Temp is : ");
    3072:	80 e6       	ldi	r24, 0x60	; 96
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_voidSendString>
        LCD_voidSendNumber(local_u8TempValue);
    307a:	8f 85       	ldd	r24, Y+15	; 0x0f
    307c:	88 2f       	mov	r24, r24
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	a0 e0       	ldi	r26, 0x00	; 0
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_voidSendNumber>
        LCD_voidSendString((u8*)"C");
    308c:	8b e6       	ldi	r24, 0x6B	; 107
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_voidSendString>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	aa ef       	ldi	r26, 0xFA	; 250
    309a:	b4 e4       	ldi	r27, 0x44	; 68
    309c:	8b 87       	std	Y+11, r24	; 0x0b
    309e:	9c 87       	std	Y+12, r25	; 0x0c
    30a0:	ad 87       	std	Y+13, r26	; 0x0d
    30a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a e7       	ldi	r20, 0x7A	; 122
    30b2:	55 e4       	ldi	r21, 0x45	; 69
    30b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8f 83       	std	Y+7, r24	; 0x07
    30be:	98 87       	std	Y+8, r25	; 0x08
    30c0:	a9 87       	std	Y+9, r26	; 0x09
    30c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c4:	6f 81       	ldd	r22, Y+7	; 0x07
    30c6:	78 85       	ldd	r23, Y+8	; 0x08
    30c8:	89 85       	ldd	r24, Y+9	; 0x09
    30ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	2c f4       	brge	.+10     	; 0x30e6 <main+0xa8>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9e 83       	std	Y+6, r25	; 0x06
    30e2:	8d 83       	std	Y+5, r24	; 0x05
    30e4:	3f c0       	rjmp	.+126    	; 0x3164 <main+0x126>
	else if (__tmp > 65535)
    30e6:	6f 81       	ldd	r22, Y+7	; 0x07
    30e8:	78 85       	ldd	r23, Y+8	; 0x08
    30ea:	89 85       	ldd	r24, Y+9	; 0x09
    30ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	4c f5       	brge	.+82     	; 0x3150 <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3100:	7c 85       	ldd	r23, Y+12	; 0x0c
    3102:	8d 85       	ldd	r24, Y+13	; 0x0d
    3104:	9e 85       	ldd	r25, Y+14	; 0x0e
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <main+0x108>
    3128:	80 e9       	ldi	r24, 0x90	; 144
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	8b 83       	std	Y+3, r24	; 0x03
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	9c 81       	ldd	r25, Y+4	; 0x04
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <main+0xf6>
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	69 f7       	brne	.-38     	; 0x3128 <main+0xea>
    314e:	14 c0       	rjmp	.+40     	; 0x3178 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	6f 81       	ldd	r22, Y+7	; 0x07
    3152:	78 85       	ldd	r23, Y+8	; 0x08
    3154:	89 85       	ldd	r24, Y+9	; 0x09
    3156:	9a 85       	ldd	r25, Y+10	; 0x0a
    3158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9e 83       	std	Y+6, r25	; 0x06
    3162:	8d 83       	std	Y+5, r24	; 0x05
    3164:	8d 81       	ldd	r24, Y+5	; 0x05
    3166:	9e 81       	ldd	r25, Y+6	; 0x06
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	9a 81       	ldd	r25, Y+2	; 0x02
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <main+0x132>
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01

        // Add a delay to allow the user to read the value
        _delay_ms(2000);
        LCD_voidClear();
    3178:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LCD_voidClear>

        if (local_u8TempValue < 20)
    317c:	8f 85       	ldd	r24, Y+15	; 0x0f
    317e:	84 31       	cpi	r24, 0x14	; 20
    3180:	28 f4       	brcc	.+10     	; 0x318c <main+0x14e>
        {
        	DCM_voidOff( DCM_WITH_CTRL_SREED,DCM_A);  // Stop the motor
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DCM_voidOff>
    318a:	2b c0       	rjmp	.+86     	; 0x31e2 <main+0x1a4>
        }
        else if (local_u8TempValue >= 20 && local_u8TempValue < 25)
    318c:	8f 85       	ldd	r24, Y+15	; 0x0f
    318e:	84 31       	cpi	r24, 0x14	; 20
    3190:	48 f0       	brcs	.+18     	; 0x31a4 <main+0x166>
    3192:	8f 85       	ldd	r24, Y+15	; 0x0f
    3194:	89 31       	cpi	r24, 0x19	; 25
    3196:	30 f4       	brcc	.+12     	; 0x31a4 <main+0x166>
        {
             DCM_voidOnWithControlSpeed( DCMOTOR_CW,DCM_A,50);// 50% duty cycle
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	42 e3       	ldi	r20, 0x32	; 50
    319e:	0e 94 09 08 	call	0x1012	; 0x1012 <DCM_voidOnWithControlSpeed>
    31a2:	1f c0       	rjmp	.+62     	; 0x31e2 <main+0x1a4>
        }
        else if (local_u8TempValue >= 25 && local_u8TempValue < 30)
    31a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a6:	89 31       	cpi	r24, 0x19	; 25
    31a8:	48 f0       	brcs	.+18     	; 0x31bc <main+0x17e>
    31aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ac:	8e 31       	cpi	r24, 0x1E	; 30
    31ae:	30 f4       	brcc	.+12     	; 0x31bc <main+0x17e>
        {
        	 DCM_voidOnWithControlSpeed( DCMOTOR_CW,DCM_A,75); // 75% duty cycle
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	4b e4       	ldi	r20, 0x4B	; 75
    31b6:	0e 94 09 08 	call	0x1012	; 0x1012 <DCM_voidOnWithControlSpeed>
    31ba:	13 c0       	rjmp	.+38     	; 0x31e2 <main+0x1a4>
        }
        else if (local_u8TempValue >= 30 && local_u8TempValue < 35)
    31bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31be:	8e 31       	cpi	r24, 0x1E	; 30
    31c0:	48 f0       	brcs	.+18     	; 0x31d4 <main+0x196>
    31c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c4:	83 32       	cpi	r24, 0x23	; 35
    31c6:	30 f4       	brcc	.+12     	; 0x31d4 <main+0x196>
        {
        	 DCM_voidOnWithControlSpeed( DCMOTOR_CW,DCM_A,85);// 85% duty cycle
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	60 e0       	ldi	r22, 0x00	; 0
    31cc:	45 e5       	ldi	r20, 0x55	; 85
    31ce:	0e 94 09 08 	call	0x1012	; 0x1012 <DCM_voidOnWithControlSpeed>
    31d2:	07 c0       	rjmp	.+14     	; 0x31e2 <main+0x1a4>

        }
        else if (local_u8TempValue >= 35)
    31d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d6:	83 32       	cpi	r24, 0x23	; 35
    31d8:	20 f0       	brcs	.+8      	; 0x31e2 <main+0x1a4>
        {
        	DCM_voidOn(DCMOTOR_CW, DCM_A); // 100% duty cycle
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	0e 94 88 07 	call	0xf10	; 0xf10 <DCM_voidOn>
        }
        DCM_voidInit (DCM_WITHOUT_CTRL_SREED,DCM_B);
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	61 e0       	ldi	r22, 0x01	; 1
    31e6:	0e 94 0a 07 	call	0xe14	; 0xe14 <DCM_voidInit>
        DCM_voidOn(DCMOTOR_CW, DCM_B);
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	61 e0       	ldi	r22, 0x01	; 1
    31ee:	0e 94 88 07 	call	0xf10	; 0xf10 <DCM_voidOn>
    31f2:	38 cf       	rjmp	.-400    	; 0x3064 <main+0x26>

000031f4 <__mulsi3>:
    31f4:	62 9f       	mul	r22, r18
    31f6:	d0 01       	movw	r26, r0
    31f8:	73 9f       	mul	r23, r19
    31fa:	f0 01       	movw	r30, r0
    31fc:	82 9f       	mul	r24, r18
    31fe:	e0 0d       	add	r30, r0
    3200:	f1 1d       	adc	r31, r1
    3202:	64 9f       	mul	r22, r20
    3204:	e0 0d       	add	r30, r0
    3206:	f1 1d       	adc	r31, r1
    3208:	92 9f       	mul	r25, r18
    320a:	f0 0d       	add	r31, r0
    320c:	83 9f       	mul	r24, r19
    320e:	f0 0d       	add	r31, r0
    3210:	74 9f       	mul	r23, r20
    3212:	f0 0d       	add	r31, r0
    3214:	65 9f       	mul	r22, r21
    3216:	f0 0d       	add	r31, r0
    3218:	99 27       	eor	r25, r25
    321a:	72 9f       	mul	r23, r18
    321c:	b0 0d       	add	r27, r0
    321e:	e1 1d       	adc	r30, r1
    3220:	f9 1f       	adc	r31, r25
    3222:	63 9f       	mul	r22, r19
    3224:	b0 0d       	add	r27, r0
    3226:	e1 1d       	adc	r30, r1
    3228:	f9 1f       	adc	r31, r25
    322a:	bd 01       	movw	r22, r26
    322c:	cf 01       	movw	r24, r30
    322e:	11 24       	eor	r1, r1
    3230:	08 95       	ret

00003232 <__udivmodhi4>:
    3232:	aa 1b       	sub	r26, r26
    3234:	bb 1b       	sub	r27, r27
    3236:	51 e1       	ldi	r21, 0x11	; 17
    3238:	07 c0       	rjmp	.+14     	; 0x3248 <__udivmodhi4_ep>

0000323a <__udivmodhi4_loop>:
    323a:	aa 1f       	adc	r26, r26
    323c:	bb 1f       	adc	r27, r27
    323e:	a6 17       	cp	r26, r22
    3240:	b7 07       	cpc	r27, r23
    3242:	10 f0       	brcs	.+4      	; 0x3248 <__udivmodhi4_ep>
    3244:	a6 1b       	sub	r26, r22
    3246:	b7 0b       	sbc	r27, r23

00003248 <__udivmodhi4_ep>:
    3248:	88 1f       	adc	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	5a 95       	dec	r21
    324e:	a9 f7       	brne	.-22     	; 0x323a <__udivmodhi4_loop>
    3250:	80 95       	com	r24
    3252:	90 95       	com	r25
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	08 95       	ret

0000325a <__divmodhi4>:
    325a:	97 fb       	bst	r25, 7
    325c:	09 2e       	mov	r0, r25
    325e:	07 26       	eor	r0, r23
    3260:	0a d0       	rcall	.+20     	; 0x3276 <__divmodhi4_neg1>
    3262:	77 fd       	sbrc	r23, 7
    3264:	04 d0       	rcall	.+8      	; 0x326e <__divmodhi4_neg2>
    3266:	e5 df       	rcall	.-54     	; 0x3232 <__udivmodhi4>
    3268:	06 d0       	rcall	.+12     	; 0x3276 <__divmodhi4_neg1>
    326a:	00 20       	and	r0, r0
    326c:	1a f4       	brpl	.+6      	; 0x3274 <__divmodhi4_exit>

0000326e <__divmodhi4_neg2>:
    326e:	70 95       	com	r23
    3270:	61 95       	neg	r22
    3272:	7f 4f       	sbci	r23, 0xFF	; 255

00003274 <__divmodhi4_exit>:
    3274:	08 95       	ret

00003276 <__divmodhi4_neg1>:
    3276:	f6 f7       	brtc	.-4      	; 0x3274 <__divmodhi4_exit>
    3278:	90 95       	com	r25
    327a:	81 95       	neg	r24
    327c:	9f 4f       	sbci	r25, 0xFF	; 255
    327e:	08 95       	ret

00003280 <__udivmodsi4>:
    3280:	a1 e2       	ldi	r26, 0x21	; 33
    3282:	1a 2e       	mov	r1, r26
    3284:	aa 1b       	sub	r26, r26
    3286:	bb 1b       	sub	r27, r27
    3288:	fd 01       	movw	r30, r26
    328a:	0d c0       	rjmp	.+26     	; 0x32a6 <__udivmodsi4_ep>

0000328c <__udivmodsi4_loop>:
    328c:	aa 1f       	adc	r26, r26
    328e:	bb 1f       	adc	r27, r27
    3290:	ee 1f       	adc	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	a2 17       	cp	r26, r18
    3296:	b3 07       	cpc	r27, r19
    3298:	e4 07       	cpc	r30, r20
    329a:	f5 07       	cpc	r31, r21
    329c:	20 f0       	brcs	.+8      	; 0x32a6 <__udivmodsi4_ep>
    329e:	a2 1b       	sub	r26, r18
    32a0:	b3 0b       	sbc	r27, r19
    32a2:	e4 0b       	sbc	r30, r20
    32a4:	f5 0b       	sbc	r31, r21

000032a6 <__udivmodsi4_ep>:
    32a6:	66 1f       	adc	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	88 1f       	adc	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	1a 94       	dec	r1
    32b0:	69 f7       	brne	.-38     	; 0x328c <__udivmodsi4_loop>
    32b2:	60 95       	com	r22
    32b4:	70 95       	com	r23
    32b6:	80 95       	com	r24
    32b8:	90 95       	com	r25
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	bd 01       	movw	r22, r26
    32c0:	cf 01       	movw	r24, r30
    32c2:	08 95       	ret

000032c4 <__prologue_saves__>:
    32c4:	2f 92       	push	r2
    32c6:	3f 92       	push	r3
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	ca 1b       	sub	r28, r26
    32ee:	db 0b       	sbc	r29, r27
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	09 94       	ijmp

000032fc <__epilogue_restores__>:
    32fc:	2a 88       	ldd	r2, Y+18	; 0x12
    32fe:	39 88       	ldd	r3, Y+17	; 0x11
    3300:	48 88       	ldd	r4, Y+16	; 0x10
    3302:	5f 84       	ldd	r5, Y+15	; 0x0f
    3304:	6e 84       	ldd	r6, Y+14	; 0x0e
    3306:	7d 84       	ldd	r7, Y+13	; 0x0d
    3308:	8c 84       	ldd	r8, Y+12	; 0x0c
    330a:	9b 84       	ldd	r9, Y+11	; 0x0b
    330c:	aa 84       	ldd	r10, Y+10	; 0x0a
    330e:	b9 84       	ldd	r11, Y+9	; 0x09
    3310:	c8 84       	ldd	r12, Y+8	; 0x08
    3312:	df 80       	ldd	r13, Y+7	; 0x07
    3314:	ee 80       	ldd	r14, Y+6	; 0x06
    3316:	fd 80       	ldd	r15, Y+5	; 0x05
    3318:	0c 81       	ldd	r16, Y+4	; 0x04
    331a:	1b 81       	ldd	r17, Y+3	; 0x03
    331c:	aa 81       	ldd	r26, Y+2	; 0x02
    331e:	b9 81       	ldd	r27, Y+1	; 0x01
    3320:	ce 0f       	add	r28, r30
    3322:	d1 1d       	adc	r29, r1
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	ed 01       	movw	r28, r26
    3330:	08 95       	ret

00003332 <_exit>:
    3332:	f8 94       	cli

00003334 <__stop_program>:
    3334:	ff cf       	rjmp	.-2      	; 0x3334 <__stop_program>
